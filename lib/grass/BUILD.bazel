load("//lib:defs.bzl", "dep_dir", "include_dir", "library_dir", "major_minor", "static_lib")
load("//lib:lib.bzl", "package_lib")
load("//toolchains:utils.bzl", "no_error", "path")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load(":configure.bzl", "configure_sed")
load(":package.bzl", "NAME", "VERSION")

package(default_visibility = ["//:__subpackages__"])

package_lib(
    version_regex = r">https://grass\.osgeo\.org/[^<]+/source/grass-([^<]+)\.tar\.gz<",
    version_url = "https://github.com/OSGeo/grass/releases",
)

TRANSITIVE_DEPS = {
    "proj": [
        # keep sorted
        "crypto",
        "curl",
        "dl",
        "jpeg",
        "lzma",
        "pthread",
        "sqlite3",
        "ssl",
        "tiff",
        "webp",
        "z",
        "zstd",
    ],
    "readline": ["tinfo"],
    "sqlite3": [
        # keep sorted
        "dl",
        "pthread",
    ],
    "tiff": [
        # keep sorted
        "jpeg",
        "lzma",
        "pthread",
        "webp",
        "z",
        "zstd",
    ],
    "zstd": ["pthread"],
}

FLAGS = [
    # keep sorted
    "--enable-64bit",
    "--enable-shared=no",
    "--with-blas",
    '--with-blas-includes="{}"'.format(include_dir("cblas")),
    '--with-blas-libs="{}"'.format(library_dir("cblas")),
    "--with-bzlib",
    '--with-bzlib-includes="{}"'.format(include_dir("bz2")),
    '--with-bzlib-libs="{}"'.format(library_dir("bz2")),
    "--with-cxx",
    "--with-fftw",
    '--with-fftw-includes="{}"'.format(include_dir("fftw")),
    '--with-fftw-libs="{}"'.format(library_dir("fftw")),
    "--with-nls",
    "--with-png",
    '--with-png-includes="{}"'.format(include_dir("png")),
    '--with-png-libs="{}"'.format(library_dir("png")),
    "--with-proj",
    '--with-proj-share="{}/share/proj"'.format(dep_dir("proj")),
    "--with-pthread",
    "--with-readline",
    '--with-readline-includes="{}"'.format(include_dir("readline")),
    '--with-readline-libs="{}"'.format(library_dir("readline")),
    "--with-regex",
    "--with-sqlite",
    '--with-sqlite-includes="{}"'.format(include_dir("sqlite")),
    '--with-sqlite-libs="{}"'.format(library_dir("sqlite")),
    "--with-tiff",
    '--with-tiff-includes="{}"'.format(include_dir("tiff")),
    '--with-tiff-libs="{}"'.format(library_dir("tiff")),
    "--with-zstd",
    '--with-zstd-includes="{}"'.format(include_dir("zstd")),
    '--with-zstd-libs="{}"'.format(library_dir("zstd")),
    "--without-cairo",
    "--without-freetype",
    "--without-gdal",  # to avoid a cyclic dependency
    "--without-lapack",
    "--without-mysql",
    "--without-odbc",
    "--without-opencl",
    "--without-opendwg",
    "--without-opengl",
    "--without-openmp",
    "--without-postgres",
    "--without-x",
]

CONFIGURE_OPTIONS = FLAGS + [
    configure_sed(TRANSITIVE_DEPS),
]

CONFIGURE_OPTIONS_WASM = CONFIGURE_OPTIONS + [
    configure_sed(
        TRANSITIVE_DEPS,
        cross_compiling = True,
    ),
]

POSTFIX_CP = " ".join((
    "cp",
    "--dereference",
    # Static libraries are installed outside of the "lib" dir, so copy them inside.
    '"{build_tmpdir}/{install_prefix}"/{name}{major_minor_nodot}/lib/lib{name}_*.{major_minor}.a',
    '"{installdir}/lib"',
)).format(
    name = NAME,
    build_tmpdir = "${BUILD_TMPDIR}",
    install_prefix = "${INSTALL_PREFIX}",
    installdir = "${INSTALLDIR}",
    major_minor = major_minor(VERSION),
    major_minor_nodot = major_minor(
        VERSION,
        join = "",
    ),
)

POSTFIX_TOUCH = (
    r'find "${INSTALLDIR}/lib" -type f -exec ' +
    r'touch -r "${BUILD_TMPDIR}/${INSTALL_PREFIX}" "{}" \;'
)

configure_make_lib(
    name = NAME,
    args = select({
        # TODO: Fix the build so this would not be necessary!
        "//config:wasm": ["|| true"],
        "//conditions:default": [],
    }),
    build_data = [
        # keep sorted
        "//lib/bison:runtime",
        "//lib/flex:runtime",
        "//lib/m4:runtime",
    ],
    configure_in_place = True,
    configure_options = select({
        "//config:wasm": CONFIGURE_OPTIONS_WASM,
        "//conditions:default": CONFIGURE_OPTIONS,
    }),
    env = {
        "BISON_PKGDATADIR": "$${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/share/bison",
        "CFLAGS": no_error([
            # keep sorted
            "absolute-value",
            "array-bounds",
            "format",
            "header-guard",
            "implicit-function-declaration",
            "implicit-int",
            "incompatible-library-redeclaration",
            "incompatible-pointer-types",
            "incompatible-pointer-types-discards-qualifiers",
            "logical-not-parentheses",
            "misleading-indentation",
            "non-literal-null-conversion",
            "parentheses",
            "pointer-bool-conversion",
            "pointer-compare",
            "pointer-sign",
            "return-type",
            "self-assign",
            "switch",
            "tautological-compare",
            "tautological-constant-out-of-range-compare",
            "tautological-pointer-compare",
            "undefined-inline",
            "uninitialized",
            "unneeded-internal-declaration",
            "unused-but-set-variable",
            "unused-function",
            "unused-variable",
        ]),
        "M4": "$${EXT_BUILD_ROOT}/$(execpaths //lib/m4:runtime)/bin/m4",
        "PATH": path([
            "$${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/bin",
            "$${EXT_BUILD_ROOT}/$(execpaths //lib/flex:runtime)/bin",
        ]),
        "PROJ_LIB": "$${EXT_BUILD_DEPS}/proj_lib/share/proj",
    },
    out_binaries = [NAME],
    out_static_libs = [
        static_lib("{}_{}.{}".format(
            NAME,
            lib,
            major_minor(VERSION),
        ))
        for lib in [
            # keep sorted
            "arraystats",
            "bitmap",
            "btree",
            "btree2",
            "calc",
            "ccmath",
            "cdhc",
            "cluster",
            "datetime",
            "dbmibase",
            "dbmiclient",
            "dbmidriver",
            "dbstubs",
            "dgl",
            "dig2",
            "display",
            "driver",
            "dspf",
            "g3d",
            "gis",
            "gmath",
            "gpde",
            "gproj",
            "htmldriver",
            "imagery",
            "interpdata",
            "interpfl",
            "iortho",
            "iostream",
            "lidar",
            "linkm",
            "lrs",
            "manage",
            "neta",
            "pngdriver",
            "psdriver",
            "qtree",
            "raster",
            "rli",
            "rowio",
            "rtree",
            "segment",
            "shape",
            "sim",
            "sqlp",
            "stats",
            "symb",
            "temporal",
            "vector",
            "vedit",
        ]
    ],
    postfix_script = " && ".join((POSTFIX_CP, POSTFIX_TOUCH)),
    deps = [
        "//lib/blas:cblas",
        "//lib/bz2",
        "//lib/fftw",
        "//lib/png",
        "//lib/proj",
        "//lib/readline",
        "//lib/sqlite",
        "//lib/tiff",
        "//lib/z",
        "//lib/zstd",
    ],
)
