load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load(":package.bzl", "MAJORMINOR", "MAJOR_MINOR")

package(default_visibility = ["//:__subpackages__"])

configure_make_lib(
    name = "grass",
    configure_env_vars = {
        # Transitive dependencies:
        "LDFLAGS": " ".join(["-l{}".format(lib) for lib in [
            # keep sorted
            "crypto",
            "curl",
            "dl",
            "jpeg",
            "lzma",
            "pthread",
            "sqlite3",
            "ssl",
            "tiff",
            "webp",
            "z",
            "zstd",
        ]]),
    },
    configure_in_place = True,
    configure_options = [
        # keep sorted
        "--enable-shared=no",
        "--with-bzlib",
        "--with-cxx",
        "--with-fftw",
        "--with-nls",
        "--with-png",
        '--with-proj-share="${EXT_BUILD_DEPS}/proj_lib/share/proj"',
        "--with-pthread",
        "--with-regex",
        "--with-sqlite",
        "--with-tiff",
        "--with-zstd",
        "--without-blas",
        "--without-cairo",
        "--without-freetype",
        "--without-gdal",
        "--without-lapack",
        "--without-mysql",
        "--without-odbc",
        "--without-opencl",
        "--without-opendwg",
        "--without-opengl",
        "--without-openmp",
        "--without-postgres",
        "--without-readline",
    ],
    make_commands = [
        # Do not build Python bindings.
        # These require shared libs and cannot be built with static libs only.
        r"sed -i lib/python/Makefile -e 's/ ctypes / /'",
        # TODO: The build will fail due to missing PROJ libs.
        # Should be fixed at some point, but for now, just ignore it.
        "make && echo PASS || echo FAIL",
        "make install",
        # Copy static libs to the right place for exporting.
        "cp -r grass_lib/grass{}/lib grass_lib".format(MAJORMINOR),
    ],
    out_static_libs = [
        "libgrass_{}.{}.a".format(lib, MAJOR_MINOR)
        for lib in [
            # keep sorted
            "arraystats",
            "bitmap",
            "btree",
            "btree2",
            "calc",
            "ccmath",
            "cdhc",
            "cluster",
            "datetime",
            "dbmibase",
            "dbmiclient",
            "dbmidriver",
            "dbstubs",
            "dgl",
            "dig2",
            "display",
            "driver",
            "dspf",
            "g3d",
            "gis",
            "gmath",
            "gpde",
            "gproj",
            "htmldriver",
            "imagery",
            "interpdata",
            "interpfl",
            "iortho",
            "iostream",
            "lidar",
            "linkm",
            "lrs",
            "manage",
            "neta",
            "pngdriver",
            "psdriver",
            "qtree",
            "raster",
            "rli",
            "rowio",
            "rtree",
            "segment",
            "shape",
            "sim",
            "sqlp",
            "stats",
            "symb",
            "temporal",
            "vector",
            "vedit",
        ]
    ],
    deps = [
        "//lib/bz2",
        "//lib/fftw",
        "//lib/png",
        "//lib/proj",
        "//lib/sqlite",
        "//lib/tiff",
        "//lib/z",
        "//lib/zstd",
    ],
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
