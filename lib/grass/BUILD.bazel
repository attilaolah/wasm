load("//lib:defs.bzl", "dep_path", "include_dir", "library_dir", "major_minor", "root_path", "runtime_path", "static_lib")
load("//lib:lib.bzl", "package_lib")
load("//toolchains:utils.bzl", "no_error")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load(":configure.bzl", "configure_sed", "with_features", "with_libraries", "without_features")
load(":package.bzl", "NAME", "STATIC_LIBS", "VERSION")

package(default_visibility = ["//:__subpackages__"])

package_lib(
    github_release = ('OSGeo', '{name}'),
    github_version_prefix = '',
)

BUILD_DEPS = [
    # keep sorted
    "//lib/bison:runtime",
    "//lib/flex:runtime",
    "//lib/m4:runtime",
]

TRANSITIVE_DEPS = {
    "proj": [
        # keep sorted
        "crypto",
        "curl",
        "dl",
        "jpeg",
        "lzma",
        "pthread",
        "sqlite3",
        "ssl",
        "tiff",
        "webp",
        "z",
        "zstd",
    ],
    "readline": ["tinfo"],
    "sqlite3": [
        # keep sorted
        "dl",
        "pthread",
    ],
    "tiff": [
        # keep sorted
        "jpeg",
        "lzma",
        "pthread",
        "webp",
        "z",
        "zstd",
    ],
    "zstd": ["pthread"],
}

FLAGS = [
    # keep sorted
    "--enable-64bit",
    "--enable-shared=no",
] + with_features(
    "cxx",
    "nls",
    "proj",
    "pthread",
    "regex",
) + with_libraries(
    "fftw",
    "png",
    "readline",
    "sqlite",
    "tiff",
    "zstd",
    blas = "cblas",
    bzlib = "bz2",
) + [
    '--with-proj-share="{}"'.format(dep_path("proj", "/share/proj")),
] + without_features(
    "cairo",
    "freetype",
    "gdal",  # to avoid a cyclic dependency
    "lapack",
    "mysql",
    "odbc",
    "opencl",
    "opendwg",
    "opengl",
    "openmp",
    "postgres",
    "x",
)

CONFIGURE_OPTIONS = FLAGS + [
    configure_sed(TRANSITIVE_DEPS),
]

CONFIGURE_OPTIONS_WASM = CONFIGURE_OPTIONS + [
    configure_sed(
        TRANSITIVE_DEPS,
        cross_compiling = True,
    ),
]

POSTFIX_CP = " ".join((
    "cp",
    "--dereference",
    # Static libraries are installed outside of the "lib" dir, so copy them inside.
    '"{build_tmpdir}/{install_prefix}"/{name}{major_minor_nodot}/lib/lib{name}_*.{major_minor}.a',
    '"{installdir}/lib"',
)).format(
    name = NAME,
    build_tmpdir = "${BUILD_TMPDIR}",
    install_prefix = "${INSTALL_PREFIX}",
    installdir = "${INSTALLDIR}",
    major_minor = major_minor(VERSION),
    major_minor_nodot = major_minor(
        VERSION,
        join = "",
    ),
)

POSTFIX_TOUCH = (
    r'find "${INSTALLDIR}/lib" -type f -exec ' +
    r'touch -r "${BUILD_TMPDIR}/${INSTALL_PREFIX}" "{}" \;'
)

configure_make_lib(
    name = NAME,
    args = select({
        # TODO: Fix the build so this would not be necessary!
        "//config:wasm": ["|| true"],
        "//conditions:default": [],
    }),
    build_data = BUILD_DEPS,
    configure_in_place = True,
    configure_options = select({
        "//config:wasm": CONFIGURE_OPTIONS_WASM,
        "//conditions:default": CONFIGURE_OPTIONS,
    }),
    env = {
        "BISON_PKGDATADIR": root_path("$(execpaths //lib/bison:runtime)/share/bison", True),
        "CFLAGS": no_error([
            # keep sorted
            "absolute-value",
            "array-bounds",
            "format",
            "header-guard",
            "implicit-function-declaration",
            "implicit-int",
            "incompatible-library-redeclaration",
            "incompatible-pointer-types",
            "incompatible-pointer-types-discards-qualifiers",
            "logical-not-parentheses",
            "misleading-indentation",
            "non-literal-null-conversion",
            "parentheses",
            "pointer-bool-conversion",
            "pointer-compare",
            "pointer-sign",
            "return-type",
            "self-assign",
            "switch",
            "tautological-compare",
            "tautological-constant-out-of-range-compare",
            "tautological-pointer-compare",
            "undefined-inline",
            "uninitialized",
            "unneeded-internal-declaration",
            "unused-but-set-variable",
            "unused-function",
            "unused-variable",
        ]),
        "M4": root_path("$(execpaths //lib/m4:runtime)/bin/m4", True),
        "PATH": runtime_path(BUILD_DEPS),
        "PROJ_LIB": dep_path("proj", "/share/proj", True),
    },
    out_binaries = [NAME],
    out_static_libs = STATIC_LIBS,
    postfix_script = "\n".join((POSTFIX_CP, POSTFIX_TOUCH)),
    deps = [
        "//lib/blas:cblas",
        "//lib/bz2",
        "//lib/fftw",
        "//lib/png",
        "//lib/proj",
        "//lib/readline",
        "//lib/sqlite",
        "//lib/tiff",
        "//lib/z",
        "//lib/zstd",
    ],
)
