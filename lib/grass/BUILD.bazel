load("//lib:defs.bzl", "major_minor")
load("//lib:defs.bzl", "lib_package")
load("//toolchains:utils.bzl", "no_error", "path")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load(":configure.bzl", "configure_sed")
load(":package.bzl", "VERSION")

package(default_visibility = ["//:__subpackages__"])

lib_package()

TRANSITIVE_DEPS = {
    "proj": [
        # keep sorted
        "crypto",
        "curl",
        "dl",
        "jpeg",
        "lzma",
        "pthread",
        "sqlite3",
        "ssl",
        "tiff",
        "webp",
        "z",
        "zstd",
    ],
    "sqlite3": [
        # keep sorted
        "dl",
        "pthread",
    ],
    "tiff": [
        # keep sorted
        "jpeg",
        "lzma",
        "pthread",
        "webp",
        "z",
        "zstd",
    ],
    "zstd": ["pthread"],
}

FLAGS = [
    # keep sorted
    "--enable-64bit",
    "--enable-shared=no",
    "--with-bzlib",
    "--with-cxx",
    "--with-fftw",
    "--with-nls",
    "--with-png",
    "--with-proj",
    '--with-proj-share="${EXT_BUILD_DEPS}/proj_lib/share/proj"',
    "--with-pthread",
    "--with-regex",
    "--with-sqlite",
    "--with-tiff",
    "--with-zstd",
    "--without-blas",
    "--without-cairo",
    "--without-freetype",
    "--without-gdal",
    "--without-lapack",
    "--without-mysql",
    "--without-odbc",
    "--without-opencl",
    "--without-opendwg",
    "--without-opengl",
    "--without-openmp",
    "--without-postgres",
    "--without-readline",
    "--without-x",
]

CONFIGURE_OPTIONS = FLAGS + [
    configure_sed(TRANSITIVE_DEPS),
]

CONFIGURE_OPTIONS_WASM = CONFIGURE_OPTIONS + [
    configure_sed(
        TRANSITIVE_DEPS,
        cross_compiling = True,
    ),
]

configure_make_lib(
    name = "grass",
    args = select({
        # TODO: Fix the build so this would not be necessary!
        "//config:wasm": ["|| true"],
        "//conditions:default": [],
    }),
    build_data = [
        # keep sorted
        "//lib/bison:runtime",
        "//lib/flex:runtime",
        "//lib/m4:runtime",
    ],
    configure_in_place = True,
    configure_options = select({
        "//config:wasm": CONFIGURE_OPTIONS_WASM,
        "//conditions:default": CONFIGURE_OPTIONS,
    }),
    env = {
        "BISON_PKGDATADIR": "${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/share/bison",
        "CFLAGS": no_error([
            # keep sorted
            "absolute-value",
            "array-bounds",
            "format",
            "header-guard",
            "implicit-function-declaration",
            "implicit-int",
            "incompatible-library-redeclaration",
            "incompatible-pointer-types",
            "incompatible-pointer-types-discards-qualifiers",
            "logical-not-parentheses",
            "misleading-indentation",
            "non-literal-null-conversion",
            "parentheses",
            "pointer-bool-conversion",
            "pointer-compare",
            "pointer-sign",
            "return-type",
            "self-assign",
            "switch",
            "tautological-compare",
            "tautological-constant-out-of-range-compare",
            "tautological-pointer-compare",
            "undefined-inline",
            "uninitialized",
            "unneeded-internal-declaration",
            "unused-but-set-variable",
            "unused-function",
            "unused-variable",
        ]),
        "M4": "${EXT_BUILD_ROOT}/$(execpaths //lib/m4:runtime)/bin/m4",
        "PATH": path([
            "${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/bin",
            "${EXT_BUILD_ROOT}/$(execpaths //lib/flex:runtime)/bin",
        ]),
        "PROJ_LIB": "${EXT_BUILD_DEPS}/proj_lib/share/proj",
    },
    out_binaries = ["grass{}".format(major_minor(
        VERSION,
        join = "",
    ))],
    out_static_libs = [
        "libgrass_{}.{}.a".format(
            lib,
            major_minor(VERSION),
        )
        for lib in [
            # keep sorted
            "arraystats",
            "bitmap",
            "btree",
            "btree2",
            "calc",
            "ccmath",
            "cdhc",
            "cluster",
            "datetime",
            "dbmibase",
            "dbmiclient",
            "dbmidriver",
            "dbstubs",
            "dgl",
            "dig2",
            "display",
            "driver",
            "dspf",
            "g3d",
            "gis",
            "gmath",
            "gpde",
            "gproj",
            "htmldriver",
            "imagery",
            "interpdata",
            "interpfl",
            "iortho",
            "iostream",
            "lidar",
            "linkm",
            "lrs",
            "manage",
            "neta",
            "pngdriver",
            "psdriver",
            "qtree",
            "raster",
            "rli",
            "rowio",
            "rtree",
            "segment",
            "shape",
            "sim",
            "sqlp",
            "stats",
            "symb",
            "temporal",
            "vector",
            "vedit",
        ]
    ],
    postfix_script = " && ".join([
        r'cp --dereference "${BUILD_TMPDIR}/${INSTALL_PREFIX}"/grass??/lib/libgrass_*.?.?.a "${INSTALLDIR}/lib"',
        r'find "${INSTALLDIR}/lib" -type f -exec touch -r "${BUILD_TMPDIR}/${INSTALL_PREFIX}" "{}" \;',
    ]),
    deps = [
        "//lib/bz2",
        "//lib/fftw",
        "//lib/png",
        "//lib/proj",
        "//lib/sqlite",
        "//lib/tiff",
        "//lib/z",
        "//lib/zstd",
    ],
)
