load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains:utils.bzl", "ldflags", "path")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load(":package.bzl", "MAJORMINOR", "MAJOR_MINOR")

package(default_visibility = ["//:__subpackages__"])

LDFLAGS = ldflags([
    # keep sorted
    "crypto",
    "curl",
    "deflate",
    "dl",
    "jpeg",
    "lzma",
    "pthread",
    "sqlite3",
    "ssl",
    "tiff",
    "webp",
    "z",
    "zstd",
])

configure_make_lib(
    name = "grass",
    build_data = [
        # keep sorted
        "//lib/bison:runtime",
        "//lib/flex:runtime",
        "//lib/m4:runtime",
    ],
    configure_in_place = True,
    configure_options = [
        # keep sorted
        "--enable-64bit",
        "--enable-shared=no",
        "--with-bzlib",
        "--with-cxx",
        "--with-fftw",
        "--with-nls",
        "--with-png",
        "--with-proj",
        '--with-proj-share="${EXT_BUILD_DEPS}/proj_lib/share/proj"',
        "--with-pthread",
        "--with-regex",
        "--with-sqlite",
        "--with-tiff",
        "--with-zstd",
        "--without-blas",
        "--without-cairo",
        "--without-freetype",
        "--without-gdal",
        "--without-lapack",
        "--without-mysql",
        "--without-odbc",
        "--without-opencl",
        "--without-opendwg",
        "--without-opengl",
        "--without-openmp",
        "--without-postgres",
        "--without-readline",
        "--without-x",
    ],
    env = {
        "BISON_PKGDATADIR": "${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/share/bison",
        "LDFLAGS": LDFLAGS,
        "M4": "${EXT_BUILD_ROOT}/$(execpaths //lib/m4:runtime)/bin/m4",
        "PATH": path([
            "${EXT_BUILD_ROOT}/$(execpaths //lib/bison:runtime)/bin",
            "${EXT_BUILD_ROOT}/$(execpaths //lib/flex:runtime)/bin",
        ]),
        "PROJ_LIB": "${EXT_BUILD_DEPS}/proj_lib/share/proj",
    },
    out_binaries = ["grass{}".format(MAJORMINOR)],
    out_static_libs = [
        "libgrass_{}.{}.a".format(lib, MAJOR_MINOR)
        for lib in [
            # keep sorted
            "arraystats",
            "bitmap",
            "btree",
            "btree2",
            "calc",
            "ccmath",
            "cdhc",
            "cluster",
            "datetime",
            "dbmibase",
            "dbmiclient",
            "dbmidriver",
            "dbstubs",
            "dgl",
            "dig2",
            "display",
            "driver",
            "dspf",
            "g3d",
            "gis",
            "gmath",
            "gpde",
            "gproj",
            "htmldriver",
            "imagery",
            "interpdata",
            "interpfl",
            "iortho",
            "iostream",
            "lidar",
            "linkm",
            "lrs",
            "manage",
            "neta",
            "pngdriver",
            "psdriver",
            "qtree",
            "raster",
            "rli",
            "rowio",
            "rtree",
            "segment",
            "shape",
            "sim",
            "sqlp",
            "stats",
            "symb",
            "temporal",
            "vector",
            "vedit",
        ]
    ],
    postfix_script = " && ".join([
        r'cp --dereference "${BUILD_TMPDIR}/${INSTALL_PREFIX}"/grass??/lib/libgrass_*.?.?.a "${INSTALLDIR}/lib"',
        r'find "${INSTALLDIR}/lib" -type f -exec touch -r "${BUILD_TMPDIR}/${INSTALL_PREFIX}" "{}" \;',
    ]),
    deps = [
        "//lib/bz2",
        "//lib/fftw",
        "//lib/png",
        "//lib/proj",
        "//lib/sqlite",
        "//lib/tiff",
        "//lib/z",
        "//lib/zstd",
    ],
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
