{
  "name": "libsupc++.a",
  "symbols": [
    "DW.ref._ZTISt9exception",
    "DW.ref.__gxx_personality_v0",
    "_ZGTtNKSt13bad_exception4whatEv",
    "_ZGTtNKSt13bad_exceptionD1Ev",
    "_ZGTtNKSt9exception4whatEv",
    "_ZGTtNKSt9exceptionD1Ev",
    "__cxa_allocate_dependent_exception",
    "__cxa_allocate_exception",
    "__cxa_bad_cast",
    "__cxa_bad_typeid",
    "__cxa_begin_catch",
    "__cxa_call_terminate",
    "__cxa_call_unexpected",
    "__cxa_current_exception_type",
    "__cxa_deleted_virtual",
    "__cxa_demangle",
    "__cxa_end_catch",
    "__cxa_free_dependent_exception",
    "__cxa_free_exception",
    "__cxa_get_exception_ptr",
    "__cxa_get_globals",
    "__cxa_get_globals_fast",
    "__cxa_guard_abort",
    "__cxa_guard_acquire",
    "__cxa_guard_release",
    "__cxa_init_primary_exception",
    "__cxa_pure_virtual",
    "__cxa_rethrow",
    "__cxa_thread_atexit",
    "__cxa_throw",
    "__cxa_throw_bad_array_length",
    "__cxa_throw_bad_array_new_length",
    "__cxa_tm_cleanup",
    "__cxa_vec_cctor",
    "__cxa_vec_cleanup",
    "__cxa_vec_ctor",
    "__cxa_vec_delete",
    "__cxa_vec_delete2",
    "__cxa_vec_delete3",
    "__cxa_vec_dtor",
    "__cxa_vec_new",
    "__cxa_vec_new2",
    "__cxa_vec_new3",
    "__cxxabiv1::__array_type_info::~__array_type_info()",
    "__cxxabiv1::__base_class_type_info::__is_public_p() const",
    "__cxxabiv1::__base_class_type_info::__is_virtual_p() const",
    "__cxxabiv1::__base_class_type_info::__offset() const",
    "__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "__cxxabiv1::__class_type_info::__dyncast_result::__dyncast_result(int)",
    "__cxxabiv1::__class_type_info::__find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "__cxxabiv1::__class_type_info::__upcast_result::__upcast_result(int)",
    "__cxxabiv1::__class_type_info::~__class_type_info()",
    "__cxxabiv1::__enum_type_info::~__enum_type_info()",
    "__cxxabiv1::__forced_unwind::~__forced_unwind()",
    "__cxxabiv1::__foreign_exception::~__foreign_exception()",
    "__cxxabiv1::__function_type_info::__is_function_p() const",
    "__cxxabiv1::__function_type_info::~__function_type_info()",
    "__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "__cxxabiv1::__pbase_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "__cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "__cxxabiv1::__pointer_type_info::__is_pointer_p() const",
    "__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "__cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "__cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "__cxxabiv1::__terminate(void (*)())",
    "__cxxabiv1::__terminate_handler",
    "__cxxabiv1::__unexpected(void (*)())",
    "__cxxabiv1::__unexpected_handler",
    "__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "__dynamic_cast",
    "__gcclibcxx_demangle_callback",
    "__gnu_cxx::__concurrence_lock_error::__concurrence_lock_error()",
    "__gnu_cxx::__concurrence_lock_error::what() const",
    "__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()",
    "__gnu_cxx::__concurrence_unlock_error::__concurrence_unlock_error()",
    "__gnu_cxx::__concurrence_unlock_error::what() const",
    "__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()",
    "__gnu_cxx::__freeres()",
    "__gnu_cxx::__mutex::__mutex()",
    "__gnu_cxx::__mutex::lock()",
    "__gnu_cxx::__mutex::unlock()",
    "__gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&)",
    "__gnu_cxx::__scoped_lock::~__scoped_lock()",
    "__gnu_cxx::__throw_concurrence_lock_error()",
    "__gnu_cxx::__throw_concurrence_unlock_error()",
    "__gnu_cxx::__verbose_terminate_handler()",
    "__gnu_cxx::recursive_init_error::recursive_init_error()",
    "__gnu_cxx::recursive_init_error::~recursive_init_error()",
    "__gxx_personality_v0",
    "__pthread_key_create",
    "__set_and_release(long*)",
    "__test_and_acquire(long*)",
    "bool std::__has_single_bit<unsigned long>(unsigned long)",
    "int std::__popcount<unsigned long>(unsigned long)",
    "operator delete(void*)",
    "operator delete(void*, std::align_val_t)",
    "operator delete(void*, std::align_val_t, std::nothrow_t const&)",
    "operator delete(void*, std::nothrow_t const&)",
    "operator delete(void*, unsigned long)",
    "operator delete(void*, unsigned long, std::align_val_t)",
    "operator delete[](void*)",
    "operator delete[](void*, std::align_val_t)",
    "operator delete[](void*, std::align_val_t, std::nothrow_t const&)",
    "operator delete[](void*, std::nothrow_t const&)",
    "operator delete[](void*, unsigned long)",
    "operator delete[](void*, unsigned long, std::align_val_t)",
    "operator new(unsigned long)",
    "operator new(unsigned long, std::align_val_t)",
    "operator new(unsigned long, std::align_val_t, std::nothrow_t const&)",
    "operator new(unsigned long, std::nothrow_t const&)",
    "operator new(unsigned long, void*)",
    "operator new[](unsigned long)",
    "operator new[](unsigned long, std::align_val_t)",
    "operator new[](unsigned long, std::align_val_t, std::nothrow_t const&)",
    "operator new[](unsigned long, std::nothrow_t const&)",
    "pthread_mutex_lock",
    "pthread_mutex_unlock",
    "std::_Fnv_hash_bytes(void const*, unsigned long, unsigned long)",
    "std::_Hash_bytes(void const*, unsigned long, unsigned long)",
    "std::__exception_ptr::exception_ptr::_M_addref()",
    "std::__exception_ptr::exception_ptr::_M_get() const",
    "std::__exception_ptr::exception_ptr::_M_release()",
    "std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()",
    "std::__exception_ptr::exception_ptr::__cxa_exception_type() const",
    "std::__exception_ptr::exception_ptr::exception_ptr()",
    "std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)",
    "std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())",
    "std::__exception_ptr::exception_ptr::exception_ptr(void*)",
    "std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const",
    "std::__exception_ptr::exception_ptr::operator!() const",
    "std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)",
    "std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)",
    "std::__exception_ptr::exception_ptr::~exception_ptr()",
    "std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "std::bad_alloc::bad_alloc()",
    "std::bad_alloc::what() const",
    "std::bad_alloc::~bad_alloc()",
    "std::bad_array_length::bad_array_length()",
    "std::bad_array_length::what() const",
    "std::bad_array_length::~bad_array_length()",
    "std::bad_array_new_length::bad_array_new_length()",
    "std::bad_array_new_length::what() const",
    "std::bad_array_new_length::~bad_array_new_length()",
    "std::bad_cast::bad_cast()",
    "std::bad_cast::what() const",
    "std::bad_cast::~bad_cast()",
    "std::bad_exception::bad_exception()",
    "std::bad_exception::what() const",
    "std::bad_exception::~bad_exception()",
    "std::bad_typeid::bad_typeid()",
    "std::bad_typeid::what() const",
    "std::bad_typeid::~bad_typeid()",
    "std::current_exception()",
    "std::exception::exception()",
    "std::exception::what() const",
    "std::exception::~exception()",
    "std::get_new_handler()",
    "std::get_terminate()",
    "std::get_unexpected()",
    "std::nested_exception::~nested_exception()",
    "std::nothrow",
    "std::rethrow_exception(std::__exception_ptr::exception_ptr)",
    "std::set_new_handler(void (*)())",
    "std::set_terminate(void (*)())",
    "std::set_unexpected(void (*)())",
    "std::terminate()",
    "std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "std::type_info::__is_function_p() const",
    "std::type_info::__is_pointer_p() const",
    "std::type_info::name() const",
    "std::type_info::operator!=(std::type_info const&) const",
    "std::type_info::operator==(std::type_info const&) const",
    "std::type_info::~type_info()",
    "std::uncaught_exception()",
    "std::uncaught_exceptions()",
    "std::unexpected()",
    "typeinfo for __cxxabiv1::__array_type_info",
    "typeinfo for __cxxabiv1::__class_type_info",
    "typeinfo for __cxxabiv1::__enum_type_info",
    "typeinfo for __cxxabiv1::__forced_unwind",
    "typeinfo for __cxxabiv1::__foreign_exception",
    "typeinfo for __cxxabiv1::__function_type_info",
    "typeinfo for __cxxabiv1::__fundamental_type_info",
    "typeinfo for __cxxabiv1::__pbase_type_info",
    "typeinfo for __cxxabiv1::__pointer_to_member_type_info",
    "typeinfo for __cxxabiv1::__pointer_type_info",
    "typeinfo for __cxxabiv1::__si_class_type_info",
    "typeinfo for __cxxabiv1::__vmi_class_type_info",
    "typeinfo for __float128",
    "typeinfo for __float128 const*",
    "typeinfo for __float128*",
    "typeinfo for __gnu_cxx::__concurrence_lock_error",
    "typeinfo for __gnu_cxx::__concurrence_unlock_error",
    "typeinfo for __gnu_cxx::recursive_init_error",
    "typeinfo for __int128",
    "typeinfo for __int128 const*",
    "typeinfo for __int128*",
    "typeinfo for bool",
    "typeinfo for bool const*",
    "typeinfo for bool*",
    "typeinfo for char",
    "typeinfo for char const*",
    "typeinfo for char*",
    "typeinfo for char16_t",
    "typeinfo for char16_t const*",
    "typeinfo for char16_t*",
    "typeinfo for char32_t",
    "typeinfo for char32_t const*",
    "typeinfo for char32_t*",
    "typeinfo for char8_t",
    "typeinfo for char8_t const*",
    "typeinfo for char8_t*",
    "typeinfo for decimal128",
    "typeinfo for decimal128 const*",
    "typeinfo for decimal128*",
    "typeinfo for decimal32",
    "typeinfo for decimal32 const*",
    "typeinfo for decimal32*",
    "typeinfo for decimal64",
    "typeinfo for decimal64 const*",
    "typeinfo for decimal64*",
    "typeinfo for double",
    "typeinfo for double const*",
    "typeinfo for double*",
    "typeinfo for float",
    "typeinfo for float const*",
    "typeinfo for float*",
    "typeinfo for int",
    "typeinfo for int const*",
    "typeinfo for int*",
    "typeinfo for long",
    "typeinfo for long const*",
    "typeinfo for long double",
    "typeinfo for long double const*",
    "typeinfo for long double*",
    "typeinfo for long long",
    "typeinfo for long long const*",
    "typeinfo for long long*",
    "typeinfo for long*",
    "typeinfo for short",
    "typeinfo for short const*",
    "typeinfo for short*",
    "typeinfo for signed char",
    "typeinfo for signed char const*",
    "typeinfo for signed char*",
    "typeinfo for std::bad_alloc",
    "typeinfo for std::bad_array_length",
    "typeinfo for std::bad_array_new_length",
    "typeinfo for std::bad_cast",
    "typeinfo for std::bad_exception",
    "typeinfo for std::bad_typeid",
    "typeinfo for std::exception",
    "typeinfo for std::nested_exception",
    "typeinfo for std::nullptr_t",
    "typeinfo for std::nullptr_t const*",
    "typeinfo for std::nullptr_t*",
    "typeinfo for std::type_info",
    "typeinfo for unsigned __int128",
    "typeinfo for unsigned __int128 const*",
    "typeinfo for unsigned __int128*",
    "typeinfo for unsigned char",
    "typeinfo for unsigned char const*",
    "typeinfo for unsigned char*",
    "typeinfo for unsigned int",
    "typeinfo for unsigned int const*",
    "typeinfo for unsigned int*",
    "typeinfo for unsigned long",
    "typeinfo for unsigned long const*",
    "typeinfo for unsigned long long",
    "typeinfo for unsigned long long const*",
    "typeinfo for unsigned long long*",
    "typeinfo for unsigned long*",
    "typeinfo for unsigned short",
    "typeinfo for unsigned short const*",
    "typeinfo for unsigned short*",
    "typeinfo for void",
    "typeinfo for void const*",
    "typeinfo for void*",
    "typeinfo for wchar_t",
    "typeinfo for wchar_t const*",
    "typeinfo for wchar_t*",
    "typeinfo name for __cxxabiv1::__array_type_info",
    "typeinfo name for __cxxabiv1::__class_type_info",
    "typeinfo name for __cxxabiv1::__enum_type_info",
    "typeinfo name for __cxxabiv1::__forced_unwind",
    "typeinfo name for __cxxabiv1::__foreign_exception",
    "typeinfo name for __cxxabiv1::__function_type_info",
    "typeinfo name for __cxxabiv1::__fundamental_type_info",
    "typeinfo name for __cxxabiv1::__pbase_type_info",
    "typeinfo name for __cxxabiv1::__pointer_to_member_type_info",
    "typeinfo name for __cxxabiv1::__pointer_type_info",
    "typeinfo name for __cxxabiv1::__si_class_type_info",
    "typeinfo name for __cxxabiv1::__vmi_class_type_info",
    "typeinfo name for __float128",
    "typeinfo name for __float128 const*",
    "typeinfo name for __float128*",
    "typeinfo name for __gnu_cxx::__concurrence_lock_error",
    "typeinfo name for __gnu_cxx::__concurrence_unlock_error",
    "typeinfo name for __gnu_cxx::recursive_init_error",
    "typeinfo name for __int128",
    "typeinfo name for __int128 const*",
    "typeinfo name for __int128*",
    "typeinfo name for bool",
    "typeinfo name for bool const*",
    "typeinfo name for bool*",
    "typeinfo name for char",
    "typeinfo name for char const*",
    "typeinfo name for char*",
    "typeinfo name for char16_t",
    "typeinfo name for char16_t const*",
    "typeinfo name for char16_t*",
    "typeinfo name for char32_t",
    "typeinfo name for char32_t const*",
    "typeinfo name for char32_t*",
    "typeinfo name for char8_t",
    "typeinfo name for char8_t const*",
    "typeinfo name for char8_t*",
    "typeinfo name for decimal128",
    "typeinfo name for decimal128 const*",
    "typeinfo name for decimal128*",
    "typeinfo name for decimal32",
    "typeinfo name for decimal32 const*",
    "typeinfo name for decimal32*",
    "typeinfo name for decimal64",
    "typeinfo name for decimal64 const*",
    "typeinfo name for decimal64*",
    "typeinfo name for double",
    "typeinfo name for double const*",
    "typeinfo name for double*",
    "typeinfo name for float",
    "typeinfo name for float const*",
    "typeinfo name for float*",
    "typeinfo name for int",
    "typeinfo name for int const*",
    "typeinfo name for int*",
    "typeinfo name for long",
    "typeinfo name for long const*",
    "typeinfo name for long double",
    "typeinfo name for long double const*",
    "typeinfo name for long double*",
    "typeinfo name for long long",
    "typeinfo name for long long const*",
    "typeinfo name for long long*",
    "typeinfo name for long*",
    "typeinfo name for short",
    "typeinfo name for short const*",
    "typeinfo name for short*",
    "typeinfo name for signed char",
    "typeinfo name for signed char const*",
    "typeinfo name for signed char*",
    "typeinfo name for std::bad_alloc",
    "typeinfo name for std::bad_array_length",
    "typeinfo name for std::bad_array_new_length",
    "typeinfo name for std::bad_cast",
    "typeinfo name for std::bad_exception",
    "typeinfo name for std::bad_typeid",
    "typeinfo name for std::exception",
    "typeinfo name for std::nested_exception",
    "typeinfo name for std::nullptr_t",
    "typeinfo name for std::nullptr_t const*",
    "typeinfo name for std::nullptr_t*",
    "typeinfo name for std::type_info",
    "typeinfo name for unsigned __int128",
    "typeinfo name for unsigned __int128 const*",
    "typeinfo name for unsigned __int128*",
    "typeinfo name for unsigned char",
    "typeinfo name for unsigned char const*",
    "typeinfo name for unsigned char*",
    "typeinfo name for unsigned int",
    "typeinfo name for unsigned int const*",
    "typeinfo name for unsigned int*",
    "typeinfo name for unsigned long",
    "typeinfo name for unsigned long const*",
    "typeinfo name for unsigned long long",
    "typeinfo name for unsigned long long const*",
    "typeinfo name for unsigned long long*",
    "typeinfo name for unsigned long*",
    "typeinfo name for unsigned short",
    "typeinfo name for unsigned short const*",
    "typeinfo name for unsigned short*",
    "typeinfo name for void",
    "typeinfo name for void const*",
    "typeinfo name for void*",
    "typeinfo name for wchar_t",
    "typeinfo name for wchar_t const*",
    "typeinfo name for wchar_t*",
    "vtable for __cxxabiv1::__array_type_info",
    "vtable for __cxxabiv1::__class_type_info",
    "vtable for __cxxabiv1::__enum_type_info",
    "vtable for __cxxabiv1::__forced_unwind",
    "vtable for __cxxabiv1::__foreign_exception",
    "vtable for __cxxabiv1::__function_type_info",
    "vtable for __cxxabiv1::__fundamental_type_info",
    "vtable for __cxxabiv1::__pbase_type_info",
    "vtable for __cxxabiv1::__pointer_to_member_type_info",
    "vtable for __cxxabiv1::__pointer_type_info",
    "vtable for __cxxabiv1::__si_class_type_info",
    "vtable for __cxxabiv1::__vmi_class_type_info",
    "vtable for __gnu_cxx::__concurrence_lock_error",
    "vtable for __gnu_cxx::__concurrence_unlock_error",
    "vtable for __gnu_cxx::recursive_init_error",
    "vtable for std::bad_alloc",
    "vtable for std::bad_array_length",
    "vtable for std::bad_array_new_length",
    "vtable for std::bad_cast",
    "vtable for std::bad_exception",
    "vtable for std::bad_typeid",
    "vtable for std::exception",
    "vtable for std::nested_exception",
    "vtable for std::type_info"
  ],
  "externs": [
    {
      "archive": "libc.a",
      "symbols": [
        "__cxa_thread_atexit_impl",
        "abort",
        "aligned_alloc",
        "fputc",
        "fputs",
        "free",
        "fwrite",
        "malloc",
        "memcpy",
        "memset",
        "realloc",
        "sprintf",
        "stderr",
        "strcmp",
        "strlen",
        "syscall",
        "write"
      ]
    },
    {
      "archive": "libgcc.a",
      "symbols": [
        "__popcountdi2"
      ]
    },
    {
      "archive": "libgcc_eh.a",
      "symbols": [
        "_Unwind_DeleteException",
        "_Unwind_GetDataRelBase",
        "_Unwind_GetIPInfo",
        "_Unwind_GetLanguageSpecificData",
        "_Unwind_GetRegionStart",
        "_Unwind_GetTextRelBase",
        "_Unwind_RaiseException",
        "_Unwind_Resume",
        "_Unwind_Resume_or_Rethrow",
        "_Unwind_SetGR",
        "_Unwind_SetIP"
      ]
    }
  ]
}
