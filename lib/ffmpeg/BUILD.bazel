load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@rules_foreign_cc//foreign_cc:configure.bzl", "configure_make")
load("//lib:defs.bzl", "runtime_path")
load("//lib:lib.bzl", "package_lib")
load("//toolchains:utils.bzl", "no_error")
load("//toolchains/make:configure.bzl", "EM_ENV", "EM_TOOLS", "configure_make_lib", "lib_source")
load(":package.bzl", "LIBS", "NAME", "STATIC_LIBS")

package(default_visibility = ["//:__subpackages__"])

package_lib()

BUILD_DEPS_K8 = [
    "//lib/yasm:runtime",
]

CONFIGURE_OPTIONS = [
    "--host-cc=$${EXT_BUILD_ROOT}/$(CC)",
    "--host-ld=$${EXT_BUILD_ROOT}/external/llvm/bin/lld",
    "--pkg-config-flags=--static",
    "--disable-all",
    "--disable-autodetect",
    "--disable-doc",
    "--enable-encoders",
    "--enable-decoders",
    "--enable-muxers",
    "--enable-demuxers",
    "--enable-pthreads",
    "--enable-gpl",
] + [
    "--enable-{}".format(lib)
    for lib in LIBS
    if lib != "avutil"
] + [
    # dependencies, keep sorted
    "--enable-bzlib",
    "--enable-iconv",
    "--enable-libvpx",
    "--enable-libwebp",
    "--enable-libx264",
    "--enable-libx265",
    "--enable-lzma",
    "--enable-zlib",
]

CONFIGURE_OPTIONS_K8 = [
    # The configure script doesn't seem to pick up $CC,
    # so we pass this explicit --cc flag to set the right compiler.
    "--cc=$${EXT_BUILD_ROOT}/$(CC)",
    "--ar=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-ar",
    "--nm=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-nm",
    "--ranlib=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-ranlib",
] + CONFIGURE_OPTIONS

CONFIGURE_OPTIONS_WASM = [
    # The configure script doesn't seem to pick up $CC,
    # so we pass this explicit --cc flag to set the right compiler.
    "--cc=$(execpath @emscripten_bin_linux//:emscripten/emcc)",
    "--ar=$(execpath @emscripten_bin_linux//:emscripten/emar)",
    "--nm=$(execpath @emscripten_bin_linux//:emscripten/emnm)",
    "--ranlib=$(execpath @emscripten_bin_linux//:emscripten/emranlib)",
] + CONFIGURE_OPTIONS + [
    # Some of these are copied from:
    # github.com/ffmpegwasm/ffmpeg.wasm @ build/ffmpeg.sh
    "--arch=x86_32",
    "--target-os=none",
    "--enable-cross-compile",
    "--disable-asm",
    "--disable-network",
    "--disable-stripping",
    "--disable-programs",
    "--disable-runtime-cpudetect",
    '--extra-cflags="{}"'.format(
        # Emscripten defaults to -Werror, downgrade these back to warnings.
        no_error([
            # keep sorted
            "#warnings",  # feature detection during configure
            "implicit-const-int-float-conversion",
            "tautological-constant-out-of-range-compare",  # 32-bit int vs int64_max
            "unused-command-line-argument",  # -L/.../lib during configure
            "unused-function",  # when enabling some muxers without their codecs
            "unused-variable",  # UDP protocol
        ]),
    ),
]

ENABLE_FFMPEG = ["--enable-ffmpeg"]

DBG_OFF = ["--disable-debug"]

OPT_ON = [
    "--enable-lto",
    "--enable-small",
]

DEPS = [
    "//lib/bz2",
    "//lib/iconv",
    "//lib/lzma",
    "//lib/vpx",
    "//lib/webp",
    "//lib/x264",
    "//lib/x265",
    "//lib/z",
]

configure_make_lib(
    name = NAME,
    build_data = {
        "//config:wasm": [],
        "//conditions:default": BUILD_DEPS_K8,
    },
    configure_options = select({
        "//config:k8_dbg": CONFIGURE_OPTIONS_K8,
        "//config:k8_fastbuild": CONFIGURE_OPTIONS_K8 + DBG_OFF,
        "//config:k8_opt": CONFIGURE_OPTIONS_K8 + DBG_OFF + OPT_ON,
        "//config:wasm_dbg": CONFIGURE_OPTIONS_WASM,
        "//config:wasm_fastbuild": CONFIGURE_OPTIONS_WASM + DBG_OFF,
        "//config:wasm_opt": CONFIGURE_OPTIONS_WASM + DBG_OFF + OPT_ON,
    }),
    env = {
        "//config:wasm": {},
        "//conditions:default": {"PATH": runtime_path(BUILD_DEPS_K8)},
    },
    out_static_libs = STATIC_LIBS,
    deps = DEPS,
)

CONFIGURE_OPTIONS_WASM_BINDINGS = CONFIGURE_OPTIONS_WASM + ENABLE_FFMPEG + [
    '--extra-cflags="{}"'.format(" ".join([
        # keep sorted
        "--pre-js=$(execpath @ffmpeg_wasm//:bind)",
    ])),
    '--extra-ldflags="{}"'.format(" ".join([
        # keep sorted
        "-lworkerfs.js",
        "-sEXPORTED_FUNCTIONS=$$(node $(execpath @ffmpeg_wasm//:export))",
        "-sEXPORTED_RUNTIME_METHODS=$$(node $(execpath @ffmpeg_wasm//:export_runtime))",
        "-sEXPORT_NAME=createFFmpegCore",
        "-sMODULARIZE",
        "-sWASM_BIGINT",
    ])),
]

# Bindings for ffmpeg.wasm.
# Based on the build script from ffmpeg.wasm:
# https://github.com/ffmpegwasm/ffmpeg.wasm/blob/main/build/ffmpeg-wasm.sh
# The main difference is that we rely on the FFmpeg makefile for building the ffmpeg binary.
configure_make(
    name = "wasm_bindings",
    build_data = EM_TOOLS + [
        "@ffmpeg_wasm//:bind",
        "@ffmpeg_wasm//:export",
        "@ffmpeg_wasm//:export_runtime",
    ],
    configure_options = select({
        "//config:wasm_dbg": CONFIGURE_OPTIONS_WASM_BINDINGS,
        "//config:wasm_fastbuild": CONFIGURE_OPTIONS_WASM_BINDINGS + DBG_OFF,
        "//config:wasm_opt": CONFIGURE_OPTIONS_WASM_BINDINGS + DBG_OFF + OPT_ON,
    }),
    env = EM_ENV,
    lib_source = lib_source(NAME),
    out_binaries = ["ffmpeg"],
    # Build with --platforms=//config:wasm32_emscripten --cpu=wasm32.
    target_compatible_with = ["@platforms//cpu:wasm32"],
    deps = DEPS,
)

bzl_library(
    name = "components_bzl",
    srcs = ["components.bzl"],
)

genrule(
    name = "components",
    srcs = [
        "@lib_ffmpeg//:all",
        "@lib_ffmpeg//:configure",
    ],
    outs = ["components.gen.bzl"],
    cmd = r"""
cat <<EOF >$@
# AUTO-GENERATED, DO NOT EDIT MANUALLY.
# A new version can be built using //lib/ffmpeg:components.
EOF

echo >>$@
echo "MUXERS = [" >>$@
$(execpath @lib_ffmpeg//:configure) \
  --list-muxers \
  | sed --regexp-extended 's/\s+/ /g' \
  | tr ' ' '\n' \
  | sort \
  | sed --regexp-extended 's/(.*)/    "\1",/g' \
  >>$@
echo "]" >>$@

echo >>$@
echo "DEMUXERS = [" >>$@
$(execpath @lib_ffmpeg//:configure) \
  --list-demuxers \
  | sed --regexp-extended 's/\s+/ /g' \
  | tr ' ' '\n' \
  | sort \
  | sed --regexp-extended 's/(.*)/    "\1",/g' \
  >>$@
echo "]" >>$@
""",
)
