load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@rules_foreign_cc//foreign_cc:configure.bzl", "configure_make")
load("//lib:defs.bzl", "runtime_path")
load("//lib:lib.bzl", "package_lib")
load("//toolchains:utils.bzl", "no_error")
load("//toolchains/make:configure.bzl", "configure_make_lib")
load("//toolchains/make:make.bzl", "EM_ENV", "EM_TOOLS", "lib_source")
load(":package.bzl", "LIBS", "NAME", "STATIC_LIBS")

package(default_visibility = ["//:__subpackages__"])

package_lib()

BUILD_DEPS_CLANG = [
    "@yasm//:yasm",
]

BUILD_DEPS_EMSCRIPTEN = [
    "@emscripten//:emar",
    "@emscripten//:emcc",
    "@emscripten//:emranlib",
]

CONFIGURE_OPTIONS = [
    "--pkg-config-flags=--static",
    "--disable-all",
    "--disable-autodetect",
    "--disable-doc",
    "--enable-muxers",
    "--enable-demuxers",
    "--enable-encoders",
    "--enable-decoders",
    "--enable-filters",
    "--enable-protocol=file",
    "--enable-pthreads",
    "--enable-gpl",
] + [
    "--enable-{}".format(lib)
    for lib in LIBS
    if lib != "avutil"
] + [
    # dependencies, keep sorted
    "--enable-bzlib",
    "--enable-iconv",
    "--enable-libvpx",
    "--enable-libwebp",
    "--enable-libx264",
    "--enable-libx265",
    "--enable-lzma",
    "--enable-zlib",
]

CONFIGURE_OPTIONS_CLANG = [
    # The configure script doesn't seem to pick up $CC,
    # so we pass this explicit --cc flag to set the right compiler.
    "--cc=$${EXT_BUILD_ROOT}/$(CC)",
    "--ar=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-ar",
    "--nm=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-nm",
    "--ranlib=$${EXT_BUILD_ROOT}/external/llvm/bin/llvm-ranlib",
] + CONFIGURE_OPTIONS

CONFIGURE_OPTIONS_WASM = [
    # The configure script doesn't seem to pick up $CC,
    # so we pass this explicit --cc flag to set the right compiler.
    "--cc=$(execpath @emscripten//:emcc)",
    "--ar=$(execpath @emscripten//:emar)",
    "--ranlib=$(execpath @emscripten//:emranlib)",
] + CONFIGURE_OPTIONS + [
    # Some of these are copied from:
    # github.com/ffmpegwasm/ffmpeg.wasm @ build/ffmpeg.sh
    "--arch=x86_32",
    "--target-os=none",
    "--enable-cross-compile",
    "--disable-asm",
    "--disable-network",
    "--disable-stripping",
    "--disable-programs",
    "--disable-runtime-cpudetect",
    '--extra-cflags="{}"'.format(" ".join([
        "-sSHARED_MEMORY",  # for -pthread support
        # Emscripten defaults to -Werror, downgrade these back to warnings.
        no_error([
            # keep sorted
            "#warnings",  # feature detection during configure
            "implicit-const-int-float-conversion",
            "tautological-constant-out-of-range-compare",  # 32-bit int vs int64_max
            "unused-command-line-argument",  # -L/.../lib during configure
            "unused-function",  # when enabling some muxers without their codecs
            "unused-variable",  # UDP protocol
        ]),
    ])),
]

DBG_OFF = ["--disable-debug"]

OPT_ON = [
    "--enable-lto",
    "--enable-small",
]

DEPS = [
    # keep sorted
    "//lib/bz2",
    "//lib/iconv",
    "//lib/lzma",
    "//lib/vpx",
    "//lib/webp",
    "//lib/x264",
    "//lib/x265",
    "//lib/z",
]

configure_make_lib(
    name = NAME,
    build_data = {
        "//cond:emscripten": BUILD_DEPS_EMSCRIPTEN,
        "//conditions:default": BUILD_DEPS_CLANG,
    },
    configure_options = select({
        "//cond:clang_dbg": CONFIGURE_OPTIONS_CLANG,
        "//cond:clang_fastbuild": CONFIGURE_OPTIONS_CLANG + DBG_OFF,
        "//cond:clang_opt": CONFIGURE_OPTIONS_CLANG + DBG_OFF + OPT_ON,
        "//cond:em_dbg": CONFIGURE_OPTIONS_WASM,
        "//cond:em_fastbuild": CONFIGURE_OPTIONS_WASM + DBG_OFF,
        "//cond:em_opt": CONFIGURE_OPTIONS_WASM + DBG_OFF + OPT_ON,
    }),
    out_static_libs = STATIC_LIBS,
    deps = DEPS,
)

CONFIGURE_OPTIONS_WASM_BINDINGS = CONFIGURE_OPTIONS_WASM + [
    "--enable-ffmpeg",
]

LDFLAGS = 'LDFLAGS-ffmpeg="{}"'.format(" ".join([
    # keep sorted
    "--pre-js=${PRE_JS}",
    "-liconv",
    "-lworkerfs.js",
    "-sEXPORTED_FUNCTIONS=${EXPORTED_FUNCTIONS}",
    "-sEXPORTED_RUNTIME_METHODS=${EXPORTED_RUNTIME_METHODS}",
    "-sEXPORT_ES6",
    "-sEXPORT_NAME=createFFmpegCore",
    "-sINITIAL_MEMORY=1024MB",
    "-sMODULARIZE",
    "-sPTHREAD_POOL_SIZE=32",  # OR: navigator.hardwareConcurrency
    "-sWASM_BIGINT",
]))

# Bindings for ffmpeg.wasm.
# Based on the build script from ffmpeg.wasm:
# https://github.com/ffmpegwasm/ffmpeg.wasm/blob/main/build/ffmpeg-wasm.sh
# The main difference is that we rely on the FFmpeg makefile for building the ffmpeg binary.
configure_make(
    name = "wasm_bindings",
    args = select({
        "//cond:dbg": [LDFLAGS + " -sASSERTIONS"],
        "//conditions:default": [LDFLAGS],
    }),
    build_data = EM_TOOLS + BUILD_DEPS_EMSCRIPTEN + [
        "@emscripten//:emconfigure",
        "@ffmpeg_wasm//:bind",
        "@ffmpeg_wasm//:export",
        "@ffmpeg_wasm//:export_runtime",
    ],
    configure_options = select({
        "//cond:em_dbg": CONFIGURE_OPTIONS_WASM_BINDINGS,
        "//cond:em_fastbuild": CONFIGURE_OPTIONS_WASM_BINDINGS + DBG_OFF,
        "//cond:em_opt": CONFIGURE_OPTIONS_WASM_BINDINGS + DBG_OFF + OPT_ON,
    }),
    configure_prefix = " ".join([
        "EM_PKG_CONFIG_PATH=$${PKG_CONFIG_PATH}",
        "$(execpath @emscripten//:emconfigure)",
    ]),
    env = dict(EM_ENV.items() + {
        "PRE_JS": "$(execpath @ffmpeg_wasm//:bind)",
        "EXPORTED_FUNCTIONS": "$$(node $(execpath @ffmpeg_wasm//:export))",
        "EXPORTED_RUNTIME_METHODS": "$$(node $(execpath @ffmpeg_wasm//:export_runtime))",
    }.items()),
    lib_source = lib_source(NAME),
    out_binaries = [
        "ffmpeg.js",
        "ffmpeg.wasm",
        "ffmpeg.worker.js",
    ],
    postfix_script = "\n".join([
        "cp ffmpeg_g ${INSTALLDIR}/bin/ffmpeg.js",
        "cp ffmpeg_g.wasm ${INSTALLDIR}/bin/ffmpeg.wasm",
        "cp ffmpeg_g.worker.js ${INSTALLDIR}/bin/ffmpeg.worker.js",
        "rm -f ${INSTALLDIR}/bin/ffmpeg",
    ]),
    # Build with --platforms=//platforms:emscripten
    target_compatible_with = ["//cond:emscripten"],
    tool_prefix = "$(execpath @emscripten//:emmake)",
    deps = DEPS,
)

bzl_library(
    name = "components_bzl",
    srcs = ["components.bzl"],
)

genrule(
    name = "components",
    srcs = [
        "@lib_ffmpeg//:all",
        "@lib_ffmpeg//:configure",
    ],
    outs = ["components.gen.bzl"],
    cmd = r"""
cat <<EOF >$@
# AUTO-GENERATED, DO NOT EDIT MANUALLY.
# A new version can be built using //lib/ffmpeg:components.
EOF

echo >>$@
echo "MUXERS = [" >>$@
$(execpath @lib_ffmpeg//:configure) \
  --list-muxers \
  | sed --regexp-extended 's/\s+/ /g' \
  | tr ' ' '\n' \
  | sort \
  | sed --regexp-extended 's/(.*)/    "\1",/g' \
  >>$@
echo "]" >>$@

echo >>$@
echo "DEMUXERS = [" >>$@
$(execpath @lib_ffmpeg//:configure) \
  --list-demuxers \
  | sed --regexp-extended 's/\s+/ /g' \
  | tr ' ' '\n' \
  | sort \
  | sed --regexp-extended 's/(.*)/    "\1",/g' \
  >>$@
echo "]" >>$@
""",
)
