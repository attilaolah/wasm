load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains:utils.bzl", "no_error")
load("//toolchains/cmake:cmake.bzl", "cmake_lib")

package(default_visibility = ["//:__subpackages__"])

TRANSITIVE_DEPS = {
    "tiff": [
        # keep sorted
        "jpeg",
        "lzma",
        "pthread",
        "webp",
        "z",
        "zstd",
    ],
    "zstd": ["pthread"],
}

cmake_lib(
    name = "opencv",
    cache_entries = {
        "BUILD_SHARED_LIBS": False,
        "INSTALL_CREATE_DISTRIB": True,
        "BUILD_PROTOBUF": False,

        # Dependencies:
        "JPEG_INCLUDE_DIR": "${EXT_BUILD_DEPS}/jpegturbo_lib/include",
        "JPEG_LIBRARY": "${EXT_BUILD_DEPS}/jpegturbo_lib/lib/libjpeg.a",
        "PNG_LIBRARY": "${EXT_BUILD_DEPS}/png_lib/lib/libpng.a",
        "PNG_PNG_INCLUDE_DIR": "${EXT_BUILD_DEPS}/png_lib/include",
        "PROTOBUF_INCLUDE_DIR": "${EXT_BUILD_DEPS}/protobuf_lib/include",
        "PROTOBUF_LIBRARY": "${EXT_BUILD_DEPS}/protobuf_lib/lib/libprotobuf.a",
        "TIFF_INCLUDE_DIR": "${EXT_BUILD_DEPS}/tiff_lib/include",
        "TIFF_LIBRARY": "${EXT_BUILD_DEPS}/tiff_lib/lib/libtiff.a",
        "WEBP_INCLUDE_DIR": "${EXT_BUILD_DEPS}/webp_lib/include",
        "WEBP_LIBRARY": "${EXT_BUILD_DEPS}/webp_lib/lib/libwebp.a",
        "ZLIB_INCLUDE_DIR": "${EXT_BUILD_DEPS}/z_lib/include",
        "ZLIB_LIBRARY": "${EXT_BUILD_DEPS}/z_lib/lib/libz.a",

        # Transitive dependencies:
        "CMAKE_EXE_LINKER_FLAGS_RELEASE": " ".join([
            # These need to be passed explicitly for the build process to succeed.
            "-L${EXT_BUILD_DEPS}/jpegturbo_lib/lib",
            "-L${EXT_BUILD_DEPS}/lzma_lib/lib",
            "-L${EXT_BUILD_DEPS}/webp_lib/lib",
            "-L${EXT_BUILD_DEPS}/zstd_lib/lib",
        ] + [
            "-l{}".format(dep)
            for dep in (TRANSITIVE_DEPS["tiff"] + TRANSITIVE_DEPS["zstd"])
        ]),
    },
    out_static_libs = [
        "libopencv_{}.a".format(lib)
        for lib in [
            # keep sorted
            "calib3d",
            "core",
            "dnn",
            "features2d",
            "flann",
            "gapi",
            "highgui",
            "imgcodecs",
            "imgproc",
            "ml",
            "objdetect",
            "photo",
            "stitching",
            "video",
            "videoio",
        ]
    ],
    deps = [
        "//lib/jpegturbo",
        "//lib/png",
        "//lib/protobuf",
        "//lib/tiff",
        "//lib/webp",
        "//lib/z",
    ],
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
