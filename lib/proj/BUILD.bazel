load("//lib:defs.bzl", "dep_path", "include_dir", "library_path", "runtime_path", "static_lib")
load("//lib:lib.bzl", "package_lib")

# Library deps:
load("//lib/sqlite:package.bzl", SQLITE_SPEC = "SPEC")
load("//toolchains:utils.bzl", "no_error")
load("//toolchains/cmake:cmake.bzl", "cache_entries", "cmake_lib")
load(":package.bzl", "NAME")

package(default_visibility = ["//:__subpackages__"])

package_lib()

BUILD_DEPS = [
    "//lib/m4:runtime",
]

BINARIES = [
    # keep sorted
    "cct",
    "cs2cs",
    "geod",
    "gie",
    "proj",
    "projinfo",
    "projsync",
]

BUILD_FLAGS = {
    "build_{}".format(component): False
    for component in BINARIES + [
        "shared_libs",
        "testing",
    ]
}

CACHE_ENTRIES = cache_entries(
    BUILD_FLAGS,
    cmake_c_flags = no_error([
        # keep sorted
        "incompatible-library-redeclaration",
    ]),
    openssl_crypto_library = library_path(
        "openssl",
        static_lib("crypto"),
    ),
    openssl_include_dir = include_dir("openssl"),
    deps = {
        "curl": {},
        "sqlite3": SQLITE_SPEC,
        "tiff": {},
    },
)

cmake_lib(
    name = NAME,
    build_data = BUILD_DEPS,
    cache_entries = {
        "//config:wasm": cache_entries(
            CACHE_ENTRIES,
            # The C++ library uses exceptions, so enable them explicitly.
            cmake_cxx_flags = "-fexceptions",
        ),
        "//conditions:default": CACHE_ENTRIES,
    },
    env = {"PATH": runtime_path(BUILD_DEPS)},
    deps = [
        "//lib/curl",
        "//lib/openssl",
        "//lib/sqlite",
        "//lib/tiff",
    ],
)
