load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains/cmake:cmake.bzl", "cmake_lib")

package(default_visibility = ["//:__subpackages__"])

BINARIES = [
    # keep sorted
    "cct",
    "cs2cs",
    "geod",
    "gie",
    "proj",
    "projinfo",
    "projsync",
]

CACHE_ENTRIES = dict({
    "CURL_INCLUDE_DIR": "${EXT_BUILD_DEPS}/curl_lib/include",
    "CURL_LIBRARY": "${EXT_BUILD_DEPS}/curl_lib/lib/libcurl.a",
    "OPENSSL_CRYPTO_LIBRARY": "${EXT_BUILD_DEPS}/openssl_lib/lib/libcrypto.a",
    "OPENSSL_INCLUDE_DIR": "${EXT_BUILD_DEPS}/openssl_lib/include",
    "SQLITE3_INCLUDE_DIR": "${EXT_BUILD_DEPS}/sqlite_lib/include",
    "SQLITE3_LIBRARY": "${EXT_BUILD_DEPS}/sqlite_lib/lib/libsqlite3.a",
    "TIFF_INCLUDE_DIR": "${EXT_BUILD_DEPS}/tiff_lib/include",
    "TIFF_LIBRARY": "${EXT_BUILD_DEPS}/tiff_lib/lib/libtiff.a",
}.items() + {
    "BUILD_{}".format(binary.upper()): False
    for binary in BINARIES + [
        "shared_libs",
        "testing",
    ]
}.items())

cmake_lib(
    name = "proj",
    build_data = ["//tools:sqlite"],
    cache_entries = CACHE_ENTRIES,
    deps = [
        "//lib/curl",
        "//lib/openssl",
        "//lib/sqlite",
        "//lib/tiff",
    ],
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
