load("//lib:lib.bzl", "package_lib")
load("//lib:defs.bzl", "dep_path", "include_dir", "library_dir")
load("//toolchains/cmake:cmake.bzl", "cache_entries", "cmake_lib")

package(default_visibility = ["//:__subpackages__"])

package_lib()

SS_LIBS = [
    # keep sorted
    "amd",
    "camd",
    "ccolamd",
    "cholmod",
    "colamd",
    "config",
    "metis",
    "spqr",
]

CACHE_ENTRIES = cache_entries(
    build_examples = False,
    build_shared_libs = False,

    # Needed to make #include <SuiteSparse_config.h> work.
    cmake_cxx_standard_include_directories = include_dir("config"),
    cmake_prefix_path = dep_path("eigen"),

    # SuiteSparse hints.
    # We must list each component since we put them in separate directories.
    suitesparse_include_dir_hints = ";".join([
        include_dir(lib)
        for lib in SS_LIBS
    ]),
    suitesparse_library_dir_hints = ";".join([
        library_dir(lib)
        for lib in SS_LIBS
    ]),
    deps = {
        "glog": {},
        "cxsparse": {},
    },
)

cmake_lib(
    name = "ceres",
    cache_entries = {
        "//config:wasm": CACHE_ENTRIES,
        "//conditions:default": cache_entries(
            CACHE_ENTRIES,
            # Add -pthread and -lsupc++ to try_compile() commands.
            # These are only needed when compiling with Clang (GCC works fine without these.)
            cmake_required_flags = "-pthread",
            cmake_required_libraries = "-lsupc++",
        ),
    },
    deps = [
        "//lib/eigen",
        "//lib/glog",
        "//lib/suitesparse:amd",
        "//lib/suitesparse:camd",
        "//lib/suitesparse:ccolamd",
        "//lib/suitesparse:cholmod",
        "//lib/suitesparse:colamd",
        "//lib/suitesparse:config",
        "//lib/suitesparse:cxsparse",
        "//lib/suitesparse:metis",
        "//lib/suitesparse:spqr",
    ],
)
