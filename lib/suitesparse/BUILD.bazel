load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains/cmake:cmake.bzl", "cmake_lib")
load("//toolchains/make:make.bzl", "make_lib")
load(":libraries.bzl", "LIB_SOURCE", "PREFIX", "suitesparse_lib")
load(":package.bzl", "METIS_VERSION")

package(default_visibility = ["//:__subpackages__"])

METIS_PATH = "metis-{}".format(METIS_VERSION)

GK_PATH = "{}/GKlib".format(METIS_PATH)

suitesparse_lib(name = "amd")

suitesparse_lib(name = "btf")

suitesparse_lib(name = "camd")

suitesparse_lib(name = "ccolamd")

suitesparse_lib(
    name = "cholmod",
    ignore_undefined_symbols = True,
    deps = [
        ":amd",
        ":camd",
        ":ccolamd",
        ":colamd",
        ":gk",
        ":metis",
        "//lib/gcc:gomp",
    ],
)

suitesparse_lib(name = "colamd")

make_lib(
    name = "config",
    install_commands = [
        'install "{}/SuiteSparse_config"/*.h ${{INSTALLDIR}}/include'.format(PREFIX),
        'install "{}/SuiteSparse_config"/*.a ${{INSTALLDIR}}/lib'.format(PREFIX),
    ],
    lib_source = LIB_SOURCE,
    linkopts = ["-lsuitesparseconfig"],
    make_commands = [
        'make -C "{}/SuiteSparse_config" static'.format(PREFIX),
    ],
    static_libraries = ["libsuitesparseconfig.a"],
)

suitesparse_lib(
    name = "csparse",
    directory = "CSparse",
)

suitesparse_lib(
    name = "cxsparse",
    directory = "CXSparse",
)

cmake_lib(
    name = "gk",
    lib_source = LIB_SOURCE,
    linkopts = ["-lGKlib"],
    static_libraries = ["libGKlib.a"],
    working_directory = GK_PATH,
)

cmake_lib(
    name = "graphblas",
    cache_entries = {
        "BUILD_GRB_STATIC_LIBRARY": True,
    },
    ignore_undefined_symbols = True,
    lib_source = LIB_SOURCE,
    working_directory = "GraphBLAS",
)

suitesparse_lib(
    name = "klu",
    deps = [
        ":amd",
        ":btf",
        ":colamd",
    ],
)

suitesparse_lib(name = "ldl")

cmake_lib(
    name = "metis",
    cache_entries = {
        "GKLIB_PATH": "{}/{}".format(PREFIX, GK_PATH),
        "SHARED": False,
    },
    lib_source = LIB_SOURCE,
    working_directory = METIS_PATH,
)

cmake_lib(
    name = "mongoose",
    lib_source = LIB_SOURCE,
    working_directory = "Mongoose",
    deps = [":config"],
)

suitesparse_lib(
    name = "rbio",
    directory = "RBio",
)

SLIP_LU_CFLAGS = " ".join([
    "-I${EXT_BUILD_DEPS}/gmp_lib/include",
    "-I${EXT_BUILD_DEPS}/mpfr_lib/include",
])

make_lib(
    name = "slip_lu",
    install_commands = [
        'install "{}/SLIP_LU/Include"/*.h ${{INSTALLDIR}}/include'.format(PREFIX),
        'install "{}/SLIP_LU/Lib"/*.a ${{INSTALLDIR}}/lib'.format(PREFIX),
    ],
    lib_source = LIB_SOURCE,
    linkopts = ["-lsliplu"],
    make_commands = [
        'make CFLAGS="{}" -C "{}/SLIP_LU" static'.format(SLIP_LU_CFLAGS, PREFIX),
    ],
    static_libraries = ["libsliplu.a"],
    deps = [
        ":amd",
        ":colamd",
        ":config",
        "//lib/gmp",
        "//lib/mpfr",
    ],
)

suitesparse_lib(
    name = "spqr",
    header_ext = "{h,hpp}",
    ignore_undefined_symbols = True,
    deps = [":cholmod"],
)

suitesparse_lib(
    name = "umfpack",
    ignore_undefined_symbols = True,
    deps = [
        ":amd",
        ":cholmod",
    ],
)

bzl_library(
    name = "package",
    srcs = [
        "libraries.bzl",
        "package.bzl",
    ],
    deps = ["//:http_archive"],
)
