load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@rules_foreign_cc//tools/build_defs:cmake.bzl", "cmake_external")
load("//toolchains/emcmake:cmake.bzl", "emcmake_cache_entries")

package(default_visibility = ["//:__subpackages__"])

_CACHE_ENTRIES = {
    "ZSTD_BUILD_SHARED:BOOL": "OFF",
    "ZSTD_BUILD_STATIC:BOOL": "ON",

    # Force linking against pthread for binaries.
    # This is required for the lib target as well, since there's no way to avoid building the binaries.
    "CMAKE_EXE_LINKER_FLAGS": "-lpthread",
}

LIB_CACHE_ENTRIES = dict(_CACHE_ENTRIES.items() + {
    "ZSTD_BUILD_PROGRAMS:BOOL": "OFF",
}.items())

BIN_CACHE_ENTRIES = dict(_CACHE_ENTRIES.items() + {
    "ZSTD_BUILD_PROGRAMS:BOOL": "ON",
}.items())

cmake_external(
    name = "zstd",
    cache_entries = select({
        "//conditions:default": LIB_CACHE_ENTRIES,
        "//config:emscripten": emcmake_cache_entries(LIB_CACHE_ENTRIES),
    }),
    lib_name = "zstd_lib",
    lib_source = "@lib_zstd//:all",
    linkopts = ["-lzstd"],
    static_libraries = ["libzstd.a"],
    working_directory = "build/cmake",
)

cmake_external(
    name = "binaries",
    binaries = [
        "unzstd",
        "zstd",
        "zstdcat",
        "zstdgrep",
        "zstdless",
        "zstdmt",
    ],
    cache_entries = select({
        "//conditions:default": BIN_CACHE_ENTRIES,
        "//config:emscripten": emcmake_cache_entries(BIN_CACHE_ENTRIES),
    }),
    lib_name = "zstd_bin",
    lib_source = "@lib_zstd//:all",
    working_directory = "build/cmake",
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
