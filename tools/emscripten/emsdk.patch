diff --git bazel/emscripten_toolchain/emar.sh bazel/emscripten_toolchain/emar.sh
index 965442e..0153d7c 100755
--- bazel/emscripten_toolchain/emar.sh
+++ bazel/emscripten_toolchain/emar.sh
@@ -1,5 +1,3 @@
 #!/bin/bash
 
-source emscripten_toolchain/env.sh
-
-exec python3 $EMSCRIPTEN/emar.py "$@"
+exec "${PYTHON:=python3}" "${EMSCRIPTEN}/emar.py" "$@"
diff --git bazel/emscripten_toolchain/emcc.sh bazel/emscripten_toolchain/emcc.sh
index 66d00b6..ed059e9 100755
--- bazel/emscripten_toolchain/emcc.sh
+++ bazel/emscripten_toolchain/emcc.sh
@@ -1,5 +1,3 @@
 #!/bin/bash
 
-source emscripten_toolchain/env.sh
-
-exec python3 external/emscripten/emscripten/emcc.py "$@"
+exec "${PYTHON:=python3}" "${EMSCRIPTEN}/emcc.py" "$@"
diff --git bazel/emscripten_toolchain/emcc_link.sh bazel/emscripten_toolchain/emcc_link.sh
index 9d0f8e2..8c0a44f 100755
--- bazel/emscripten_toolchain/emcc_link.sh
+++ bazel/emscripten_toolchain/emcc_link.sh
@@ -1,5 +1,3 @@
 #!/bin/bash
 
-source emscripten_toolchain/env.sh
-
-exec python3 emscripten_toolchain/link_wrapper.py "$@"
+exec "${PYTHON:=python3}" "${ROOT_DIR}/external/emsdk/emscripten_toolchain/link_wrapper.py" "$@"
diff --git bazel/emscripten_toolchain/link_wrapper.py bazel/emscripten_toolchain/link_wrapper.py
index a746ae8..a9bacda 100644
--- bazel/emscripten_toolchain/link_wrapper.py
+++ bazel/emscripten_toolchain/link_wrapper.py
@@ -21,36 +21,24 @@ import subprocess
 import sys
 
 # Only argument should be @path/to/parameter/file
-assert sys.argv[1][0] == '@'
-param_filename = sys.argv[1][1:]
-param_file_args = [l.strip() for l in open(param_filename, 'r').readlines()]
+if len(sys.argv) == 2 and sys.argv[1].startswith('@'):
+  param_filename = sys.argv[1][1:]
+  param_file_args = [l.strip() for l in open(param_filename, 'r').readlines()]
+else:
+  param_file_args = sys.argv[1:]
 
 output_index = param_file_args.index('-o') + 1
 orig_output = js_output = param_file_args[output_index]
 outdir = os.path.dirname(orig_output)
 
-# google3-only(TODO(b/139440956): Default to False once the bug is fixed)
-replace_response_file = any(' ' in a for a in param_file_args)
-
 if not os.path.splitext(orig_output)[1]:
   js_output = orig_output + '.js'
   param_file_args[output_index] = js_output
   replace_response_file = True
 
-# Re-write response file if needed.
-if replace_response_file:
-  new_param_filename = param_filename + '.modified'
-  with open(new_param_filename, 'w') as f:
-    for param in param_file_args:
-      if ' ' in param:
-        f.write('"%s"' % param)
-      else:
-        f.write(param)
-      f.write('\n')
-  sys.argv[1] = '@' + new_param_filename
-
+python = os.environ.get('PYTHON', 'python3')
 emcc_py = os.path.join(os.environ['EMSCRIPTEN'], 'emcc.py')
-rtn = subprocess.call(['python3', emcc_py] + sys.argv[1:])
+rtn = subprocess.call([python, emcc_py] + sys.argv[1:])
 if rtn != 0:
   sys.exit(1)
 
