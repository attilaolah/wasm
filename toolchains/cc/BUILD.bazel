load("@local_config_cc//:cc_toolchain_config.bzl", "cc_toolchain_config")
load(":wasm_toolchain_config.bzl", "wasm_toolchains")

wasm_toolchains(
    exec_cpu = "x86_64",
    exec_os = "linux",
)

LINUX_X86_64 = [
    "@platforms//os:linux",
    "@platforms//cpu:x86_64",
]

toolchain(
    name = "linux_x86_64_clang",
    exec_compatible_with = LINUX_X86_64,
    target_compatible_with = LINUX_X86_64,
    toolchain = "linux_x86_64_clang_cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

# Based on the output of:
# CC=clang bazel query --output=build @local_config_cc//:cc-compiler-k8
cc_toolchain(
    name = "linux_x86_64_clang_cc_toolchain",
    all_files = ":builtin_include_directory_paths",
    ar_files = ":builtin_include_directory_paths",
    as_files = ":builtin_include_directory_paths",
    compiler_files = ":builtin_include_directory_paths",
    dwp_files = "@local_config_cc//:empty",
    linker_files = ":builtin_include_directory_paths",
    objcopy_files = "@local_config_cc//:empty",
    strip_files = "@local_config_cc//:empty",
    supports_param_files = True,
    toolchain_config = ":linux_x86_64_clang_config",
    toolchain_identifier = "local",
    visibility = ["//toolchains:__pkg__"],

    # NOTE: The original module map would be:
    # module_map = "@local_config_cc//:module.modulemap",
    # However, it is only generated when auto-configuring with CC=clang.
)

# Based on the output of:
# CC=clang bazel query --output=build @local_config_cc//:local
cc_toolchain_config(
    name = "linux_x86_64_clang_config",
    abi_libc_version = "local",
    abi_version = "local",
    compile_flags = [
        "-U_FORTIFY_SOURCE",
        "-fstack-protector",
        "-Wall",
        "-Wthread-safety",
        "-Wself-assign",
        "-fcolor-diagnostics",
        "-fno-omit-frame-pointer",
    ],
    compiler = "clang",
    coverage_compile_flags = ["--coverage"],
    coverage_link_flags = ["--coverage"],
    cpu = "k8",
    cxx_builtin_include_directories = [
        "/usr/local/include",
        "/usr/lib/llvm-9/lib/clang/9.0.1/include",
        "/usr/include/x86_64-linux-gnu",
        "/usr/include",
        "/usr/lib/llvm-9/lib/clang/9.0.1/share",
        "/usr/include/c++/9",
        "/usr/include/x86_64-linux-gnu/c++/9",
        "/usr/include/c++/9/backward",
        "/usr/lib/clang/9.0.1/include",
    ],
    cxx_flags = ["-std=c++0x"],
    dbg_compile_flags = ["-g"],
    host_system_name = "local",
    link_flags = [
        "-fuse-ld=/usr/bin/ld.gold",
        "-Wl,-no-as-needed",
        "-Wl,-z,relro,-z,now",
        "-B/usr/bin",
        "-lstdc++",
        "-lm",
    ],
    link_libs = [],
    opt_compile_flags = [
        "-g0",
        "-O2",
        "-D_FORTIFY_SOURCE=1",
        "-DNDEBUG",
        "-ffunction-sections",
        "-fdata-sections",
    ],
    opt_link_flags = ["-Wl,--gc-sections"],
    supports_start_end_lib = True,
    target_libc = "local",
    target_system_name = "local",
    tool_paths = {
        "ar": "/usr/bin/ar",
        "ld": "/usr/bin/ld",
        "cpp": "/usr/bin/cpp",
        "gcc": "/usr/bin/clang",
        "dwp": "/usr/bin/dwp",
        "gcov": "/usr/bin/gcov",
        "nm": "/usr/bin/nm",
        "objcopy": "/usr/bin/objcopy",
        "objdump": "/usr/bin/objdump",
        "strip": "/usr/bin/strip",
    },
    toolchain_identifier = "local",
    unfiltered_compile_flags = [
        "-no-canonical-prefixes",
        "-Wno-builtin-macro-redefined",
        '-D__DATE__="redacted"',
        '-D__TIMESTAMP__="redacted"',
        '-D__TIME__="redacted"',
    ],
)

filegroup(
    name = "builtin_include_directory_paths",
    srcs = ["@local_config_cc//:builtin_include_directory_paths"],
)

filegroup(
    name = "empty",
    srcs = [],
)
