load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_binary", "closure_js_library")
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("//tools:wasm_library.bzl", "wasm_library")
load("//notebook:js.bzl", "JS_TARGET", "TS_TARGET")

package(default_visibility = ["//notebook:__subpackages__"])

filegroup(
    name = "runtime",
    srcs = [
        "runtime_wasm_js",
        "runtime_wasm_js_3",
        "runtime_wasm_binary",
    ],
)

ts_project(
    name = "runtime_ts",
    srcs = ["main.ts"] + [
        "cmark_wrap.ts",
        "md_to_html.ts",
        "toc.ts",
        "types.ts",
    ],
    tsconfig = {"compilerOptions": {
        "target": TS_TARGET,
        "esModuleInterop": True,
        "module": "commonjs",
    }},
    deps = [
        "@npm//@types/emscripten",
        "@npm//@types/node",
    ],
)

wasm_library(
    name = "runtime_wasm",
    srcs = [":runtime_ts"],
    build_settings = {
        # Required for larger notebooks:
        "ALLOW_MEMORY_GROWTH": "1",
    },
    exported_functions = [
        # keep sorted
        "cmark_markdown_to_html",
        "cmark_version_string",
        "free",
        "malloc",
    ],
    deps = ["//lib/cmark"],
)

filegroup(
    name = "runtime_wasm_js",
    srcs = [":runtime_wasm"],
    output_group = "js",
)

filegroup(
    name = "runtime_wasm_binary",
    srcs = [":runtime_wasm"],
    output_group = "wasm",
)

# 3-staged compilation for the Emscripten module:
#
# 1.  Prepare code to be closure-compiler friendly.
# 2.  Process code by closure-compiler in simple + sort_only mode.
# 3.  Post-process the minified code to undo changes made in step 1.


genrule(
    name = "runtime_wasm_js_1",
    srcs = [":runtime_wasm_js"],
    outs = ["runtime_wasm_js_1.js"],
    cmd = "sed -e 's/import.meta.url/\"import.meta.url\"/g' -e 's/self[\"Module\"]/Module/g' <$< >$@",
)

closure_js_binary(
    name = "runtime_wasm_js_2",
    language = JS_TARGET,
    deps = [":runtime_wasm_js_2_lib"],
    compilation_level = "SIMPLE",
    dependency_mode = "SORT_ONLY",
)

closure_js_library(
    name = "runtime_wasm_js_2_lib",
    srcs = [":runtime_wasm_js_1"],
    no_closure_library = True,
    suppress = [
        # Closure Compiler currently does not consume TypeScript .d.ts inputs.
        # Therefore it has no clue about the types, so we disable some optimisations.
        "JSC_UNKNOWN_EXPR_TYPE",
        # When building with MODULARIZE=0, the Module object gets redeclared.
        "JSC_REFERENCE_BEFORE_DECLARE",
        # When building with MODULARIZE=0, the Module object gets assigned on the global "this" object.
        "JSC_USED_GLOBAL_THIS",
        # Emscripten's non-optimised code uses assertions.
        "JSC_DETERMINISTIC_TEST",
        # Emscripten's non-optimised code uses a lot of "environment detection" magic.
        "JSC_UNDEFINED_VARIABLE",
        # Emscripten re-declares the Module object, unless EXPORT_NAME is provided.
        "JSC_REDECLARED_VARIABLE",
        # Suppress use of "use_strict";
        "JSC_USELESS_CODE",
        # These are required for double-optimised code (-c opt, which also enables acorn).
        "JSC_NOT_A_CONSTRUCTOR",
        "JSC_TYPE_MISMATCH",
        "JSC_WRONG_ARGUMENT_COUNT",
    ],
)

genrule(
    name = "runtime_wasm_js_3",
    srcs = [":runtime_wasm_js_2"],
    outs = ["runtime_wasm_js_3.js"],
    cmd = "sed -e 's/\"import.meta.url\"/import.meta.url/g' <$(RULEDIR)/runtime_wasm_js_2.js >$@",
)
