load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_binary", "closure_js_library")
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("//tools:wasm_library.bzl", "wasm_library")
load("//notebook:js.bzl", "JS_TARGET", "TS_TARGET")

package(default_visibility = ["//notebook:__subpackages__"])

filegroup(
    name = "runtime",
    srcs = select({
        "//config:opt": [
            ":runtime_wasm_binary",
            ":runtime_wasm_js_3",
        ],
        "//conditions:default": [":runtime_wasm"],
    }),
)

TYPE_HINTS = [
    "type_hints.ts",
]

ts_project(
    name = "runtime_ts",
    # The type hints must come first.
    srcs = TYPE_HINTS + [
        "main.ts",
        "cmark_wrap.ts",
        "md_to_html.ts",
        "create_toc.ts",
        "syntax_highlighter.ts",
    ],
    tsconfig = {"compilerOptions": {
        "target": TS_TARGET,
        "esModuleInterop": True,
        "module": "commonjs",
    }},
    deps = [
        "@npm//@types/emscripten",
        "@npm//@types/node",
        "@npm//@types/prismjs",
    ],
)

wasm_library(
    name = "runtime_wasm",
    srcs = [":runtime_ts"],
    build_settings = {
        # Required for larger notebooks:
        "ALLOW_MEMORY_GROWTH": "1",
        # We don't need filesystem support:
        "FILESYSTEM": "0",
    },
    exclude = TYPE_HINTS,
    exported_functions = [
        # GFM MD2HTML functions:
        "cmark_gfm_core_extensions_ensure_registered",
        "cmark_find_syntax_extension",
        "cmark_node_free",
        "cmark_parser_attach_syntax_extension",
        "cmark_parser_feed",
        "cmark_parser_finish",
        "cmark_parser_free",
        "cmark_parser_new",
        "cmark_render_html",
        "cmark_version_string",

        # For listing extensions:
        "cmark_get_default_mem_allocator",
        "cmark_list_syntax_extensions",
        "cmark_llist_free",

        # For simple conversion:
        "cmark_markdown_to_html",

        # Memory allocation:
        "free",
        "malloc",
    ],
    deps = ["//lib/cmarkgfm"],
)

filegroup(
    name = "runtime_wasm_js",
    srcs = [":runtime_wasm"],
    output_group = "js",
)

filegroup(
    name = "runtime_wasm_binary",
    srcs = [":runtime_wasm"],
    output_group = "wasm",
)

genrule(
    name = "runtime_wasm_js_1",
    srcs = [":runtime_wasm_js"],
    outs = ["runtime_wasm_js_1.js"],
    cmd = r"""
sed --expression '
    s/import\.meta\.url/"import.meta.url"/g
  ' <$< >$@
""",
)

closure_js_library(
    name = "runtime_wasm_js_1_lib",
    srcs = [":runtime_wasm_js_1"],
    no_closure_library = True,
    suppress = [
        # Closure Compiler currently does not consume TypeScript .d.ts inputs.
        # Therefore it has no clue about the types, so we disable some optimisations.
        "JSC_UNKNOWN_EXPR_TYPE",
        # When building with MODULARIZE=0, the Module object gets redeclared.
        "JSC_REFERENCE_BEFORE_DECLARE",
        # When building with MODULARIZE=0, the Module object gets assigned on the global "this" object.
        "JSC_USED_GLOBAL_THIS",
        # Emscripten's non-optimised code uses assertions.
        "JSC_DETERMINISTIC_TEST",
        # Emscripten's non-optimised code uses a lot of "environment detection" magic.
        "JSC_UNDEFINED_VARIABLE",
        # Emscripten re-declares the Module object, unless EXPORT_NAME is provided.
        "JSC_REDECLARED_VARIABLE",
        # Suppress use of "use_strict";
        "JSC_USELESS_CODE",
        # These are required for double-optimised code (-c opt, which also enables acorn).
        "JSC_NOT_A_CONSTRUCTOR",
        "JSC_TYPE_MISMATCH",
        "JSC_WRONG_ARGUMENT_COUNT",
    ],
)

closure_js_binary(
    name = "runtime_wasm_js_2",
    compilation_level = "SIMPLE",
    dependency_mode = "SORT_ONLY",
    language = JS_TARGET,
    deps = [":runtime_wasm_js_1_lib"],
)

genrule(
    name = "runtime_wasm_js_3",
    srcs = [":runtime_wasm_js_2"],
    outs = ["runtime_wasm_js_3.js"],
    cmd = r"""
sed --expression '
    s/\"import\.meta\.url\"/import.meta.url/g
  ' <$(RULEDIR)/runtime_wasm_js_2.js >$@
sed --in-place --regexp-extended '
    1h;2,$$H;$$!d;g;
    s/\$$\$$module\$$[^=]+//
    s/[;\n,]*\$$jscompDefaultExport\$$.*/;export default Module;/g
  ' $@
""",
)
