bazel_dep(name = "gazelle", version = "0.34.0")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
bazel_dep(name = "rules_go", version = "0.43.0")
bazel_dep(name = "rules_nixpkgs_core", version = "0.10.0")
bazel_dep(name = "rules_nixpkgs_cc", version = "0.10.0")
bazel_dep(name = "rules_ruby", version = "0.4.1")

single_version_override(
    module_name = "rules_foreign_cc",
    patches = ["//:rules_foreign_cc.patch"],
    version = "0.10.1",
)

archive_override(
    module_name = "rules_nixpkgs_cc",
    integrity = "sha256-mA7fzu8uWeESLZvmxSQTvCmENfCj1FJTK4pI11Yv/Wc=",
    patches = ["//:rules_nixpkgs_cc.patch"],
    strip_prefix = "rules_nixpkgs-0.10.0/toolchains/cc",
    urls = ["https://github.com/tweag/rules_nixpkgs/releases/download/v0.10.0/rules_nixpkgs-0.10.0.tar.gz"],
)

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.21.5")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_moby_buildkit",
    "com_github_rican7_conjson",
    "in_gopkg_yaml",
    "net_starlark_go",
    "org_golang_x_mod",
)

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "rules_ruby",
    # TODO: Bundle a version with nixpkgs?
    version = "system",
)
use_repo(ruby, "rules_ruby_dist")
ruby.bundle(
    name = "bundle",
    srcs = ["//:Gemfile.lock"],
    gemfile = "//:Gemfile",
    toolchain = "@rules_ruby_dist//:BUILD",
)
use_repo(ruby, "bundle", "rules_ruby_toolchains")

register_toolchains("@rules_ruby_toolchains//:all")

nix_repo = use_extension("@rules_nixpkgs_core//extensions:repository.bzl", "nix_repo")
nix_repo.github(
    name = "nixpkgs",
    sha256 = "f2b96094f6dfbb53b082fe8709da94137475fcfead16c960f2395c98fc014b68",
    tag = "23.05",
)
use_repo(nix_repo, "nixpkgs")

nix_pkg = use_extension("@rules_nixpkgs_core//extensions:package.bzl", "nix_pkg")

NIX_PKGS = [
    # keep sorted
    "bison",
    "emscripten",
    "m4",
    "nasm",
    "nodejs",
    "python3",
    "sqlite",
    "yasm",
]

[
    nix_pkg.attr(
        attr = pkg_name,
        build_file = "//nix:{}.build".format(pkg_name),
    )
    for pkg_name in NIX_PKGS
]

use_repo(
    nix_pkg,
    "bison",
    "emscripten",
    "m4",
    "nasm",
    "nodejs",
    "python3",
    "sqlite",
    "yasm",
)
