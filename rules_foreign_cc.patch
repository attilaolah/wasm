diff --git MODULE.bazel MODULE.bazel
index da990d8..f6477d8 100644
--- MODULE.bazel
+++ MODULE.bazel
@@ -14,20 +14,12 @@ tools = use_extension("@rules_foreign_cc//foreign_cc:extensions.bzl", "tools")
 use_repo(
     tools,
     "cmake_3.23.2_toolchains",
-    "cmake_src",
-    "gnumake_src",
-    "meson_src",
     "ninja_1.11.1_toolchains",
-    "ninja_build_src",
-    "pkgconfig_src",
     "rules_foreign_cc_framework_toolchains",
 )
 
 register_toolchains(
     "@rules_foreign_cc_framework_toolchains//:all",
-    "@rules_foreign_cc//toolchains:built_make_toolchain",
-    "@rules_foreign_cc//toolchains:built_meson_toolchain",
-    "@rules_foreign_cc//toolchains:built_pkgconfig_toolchain",
     "@rules_foreign_cc//toolchains:preinstalled_autoconf_toolchain",
     "@rules_foreign_cc//toolchains:preinstalled_automake_toolchain",
     "@rules_foreign_cc//toolchains:preinstalled_m4_toolchain",
diff --git examples/third_party/mesa/BUILD.mesa.bazel examples/third_party/mesa/BUILD.mesa.bazel
index 074f666..0e4ef2a 100644
--- examples/third_party/mesa/BUILD.mesa.bazel
+++ examples/third_party/mesa/BUILD.mesa.bazel
@@ -39,6 +39,12 @@ meson_with_requirements(
         },
     }),
     lib_source = ":all_srcs",
+    linkopts = select({
+        "@openssl//:msvc_compiler": [
+            "ws2_32.lib",
+        ],
+        "//conditions:default": [],
+    }),
     options = select({
         "@platforms//os:linux": {
             # Disable LLVM support, as building LLVM in rules_foreign_cc CI would drastically increase the build time
diff --git foreign_cc/boost_build.bzl foreign_cc/boost_build.bzl
index d8e489f..2462117 100644
--- foreign_cc/boost_build.bzl
+++ foreign_cc/boost_build.bzl
@@ -15,6 +15,7 @@ def _boost_build_impl(ctx):
         ctx.attr,
         configure_name = "BoostBuild",
         create_configure_script = _create_configure_script,
+        tools_data = [],
     )
     return cc_external_rule_impl(ctx, attrs)
 
diff --git foreign_cc/configure.bzl foreign_cc/configure.bzl
index ddfc379..33f0e3d 100644
--- foreign_cc/configure.bzl
+++ foreign_cc/configure.bzl
@@ -98,6 +98,7 @@ def _create_configure_script(configureParameters):
         deps = ctx.attr.deps,
         inputs = inputs,
         env_vars = user_env,
+        env_vars_override = ctx.attr.env_override,
         configure_in_place = ctx.attr.configure_in_place,
         prefix_flag = ctx.attr.prefix_flag,
         autoconf = ctx.attr.autoconf,
@@ -224,6 +225,7 @@ configure_make = rule(
     attrs = _attrs(),
     fragments = CC_EXTERNAL_RULE_FRAGMENTS,
     output_to_genfiles = True,
+    provides = [CcInfo],
     implementation = _configure_make,
     toolchains = [
         "@rules_foreign_cc//toolchains:autoconf_toolchain",
diff --git foreign_cc/extensions.bzl foreign_cc/extensions.bzl
index 23fd14b..55e2805 100644
--- foreign_cc/extensions.bzl
+++ foreign_cc/extensions.bzl
@@ -17,10 +17,10 @@ ninja_toolchain_version = tag_class(attrs = {
 def _init(module_ctx):
     rules_foreign_cc_dependencies(
         register_toolchains = False,
-        register_built_tools = True,
+        register_built_tools = False,
         register_default_tools = False,
         register_preinstalled_tools = False,
-        register_built_pkgconfig_toolchain = True,
+        register_built_pkgconfig_toolchain = False,
     )
 
     versions = {
diff --git foreign_cc/make.bzl foreign_cc/make.bzl
index fcdd8a5..c7c6862 100644
--- foreign_cc/make.bzl
+++ foreign_cc/make.bzl
@@ -74,6 +74,7 @@ def _create_make_script(configureParameters):
         deps = ctx.attr.deps,
         inputs = inputs,
         env_vars = user_env,
+        env_vars_override = ctx.attr.env_override,
         make_commands = make_commands,
     )
 
diff --git foreign_cc/meson.bzl foreign_cc/meson.bzl
index 7b26f75..33f38a3 100644
--- foreign_cc/meson.bzl
+++ foreign_cc/meson.bzl
@@ -2,6 +2,12 @@
 
 load("//foreign_cc:utils.bzl", "full_label")
 load("//foreign_cc/built_tools:meson_build.bzl", "meson_tool")
+load(
+    "//foreign_cc/private:cc_toolchain_util.bzl",
+    "absolutize_path_in_str",
+    "get_flags_info",
+    "get_tools_info",
+)
 load(
     "//foreign_cc/private:detect_root.bzl",
     "detect_root",
@@ -61,8 +67,34 @@ def _create_meson_script(configureParameters):
     attrs = configureParameters.attrs
     inputs = configureParameters.inputs
 
+    tools = get_tools_info(ctx)
     script = pkgconfig_script(inputs.ext_build_dirs)
 
+    # CFLAGS and CXXFLAGS are also set in foreign_cc/private/cmake_script.bzl, so that meson
+    # can use the intended tools.
+    # However, they are split by meson on whitespace. For Windows it's common to have spaces in path
+    # https://github.com/mesonbuild/meson/issues/3565
+    # Skip setting them in this case.
+    if " " not in tools.cc:
+        script.append("##export_var## CC {}".format(_absolutize(ctx.workspace_name, tools.cc)))
+    if " " not in tools.cxx:
+        script.append("##export_var## CXX {}".format(_absolutize(ctx.workspace_name, tools.cxx)))
+
+    # set flags same as foreign_cc/private/cc_toolchain_util.bzl
+    # cannot use get_flags_info() because bazel adds additional flags that
+    # aren't compatible with compiler or linker above
+    copts = (ctx.fragments.cpp.copts + ctx.fragments.cpp.conlyopts + getattr(ctx.attr, "copts", [])) or []
+    cxxopts = (ctx.fragments.cpp.copts + ctx.fragments.cpp.cxxopts + getattr(ctx.attr, "copts", [])) or []
+
+    if copts:
+        script.append("##export_var## CFLAGS \"{}\"".format(" ".join(copts).replace("\"", "'")))
+    if cxxopts:
+        script.append("##export_var## CXXFLAGS \"{}\"".format(" ".join(cxxopts).replace("\"", "'")))
+
+    flags = get_flags_info(ctx)
+    if flags.cxx_linker_executable:
+        script.append("##export_var## LDFLAGS \"{}\"".format(" ".join(flags.cxx_linker_executable).replace("\"", "'")))
+
     script.append("##export_var## CMAKE {}".format(attrs.cmake_path))
     script.append("##export_var## NINJA {}".format(attrs.ninja_path))
     script.append("##export_var## PKG_CONFIG {}".format(attrs.pkg_config_path))
@@ -201,3 +233,9 @@ def meson_with_requirements(name, requirements, **kwargs):
         toolchain = full_label("built_meson_toolchain_for_{}".format(name)),
         **kwargs
     )
+
+def _absolutize(workspace_name, text, force = False):
+    if text.strip(" ").startswith("C:") or text.strip(" ").startswith("c:"):
+        return "\"{}\"".format(text)
+
+    return absolutize_path_in_str(workspace_name, "$EXT_BUILD_ROOT/", text, force)
diff --git foreign_cc/private/cmake_script.bzl foreign_cc/private/cmake_script.bzl
index bfe21bd..7c2782f 100644
--- foreign_cc/private/cmake_script.bzl
+++ foreign_cc/private/cmake_script.bzl
@@ -200,7 +200,9 @@ def _create_crosstool_file_text(toolchain_dict, user_cache, user_env):
     _move_dict_values(toolchain_dict, env_vars, _CMAKE_ENV_VARS_FOR_CROSSTOOL)
     _move_dict_values(toolchain_dict, cache_entries, _CMAKE_CACHE_ENTRIES_CROSSTOOL)
 
-    lines = []
+    lines = [
+        "add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-xc++>)",
+    ]
     crosstool_vars = []
 
     # The __var_* bash variables that are set here are a method to avoid
@@ -209,8 +211,10 @@ def _create_crosstool_file_text(toolchain_dict, user_cache, user_env):
     # but then we loose the ability to expand other variables such as
     # $EXT_BUILD_DEPS and so we use this trick to leave expansion turned on in
     # the HEREDOC for the crosstool
-    for key in toolchain_dict:
-        crosstool_vars.append("__var_{}=\"{}\"".format(key, _escape_dquote_bash_crosstool(toolchain_dict[key])))
+    for key, val in toolchain_dict.items():
+        if key == "CMAKE_CXX_FLAGS_INIT":
+            val = val.replace("-x c++", "")
+        crosstool_vars.append("__var_{}=\"{}\"".format(key, _escape_dquote_bash_crosstool(val)))
         if ("CMAKE_AR" == key):
             lines.append('set({} "$$__var_{}$$" {})'.format(
                 key,
diff --git foreign_cc/private/configure_script.bzl foreign_cc/private/configure_script.bzl
index 06c516e..de4f470 100644
--- foreign_cc/private/configure_script.bzl
+++ foreign_cc/private/configure_script.bzl
@@ -14,6 +14,7 @@ def create_configure_script(
         deps,
         inputs,
         env_vars,
+        env_vars_override,
         configure_in_place,
         prefix_flag,
         autoconf,
@@ -70,7 +71,7 @@ def create_configure_script(
 
     script.append("##mkdirs## $$BUILD_TMPDIR$$/$$INSTALL_PREFIX$$")
     script.append("{env_vars} {prefix}\"{configure}\" {prefix_flag}$$BUILD_TMPDIR$$/$$INSTALL_PREFIX$$ {user_options}".format(
-        env_vars = get_make_env_vars(workspace_name, tools, flags, env_vars, deps, inputs),
+        env_vars = get_make_env_vars(workspace_name, tools, flags, env_vars, env_vars_override, deps, inputs),
         prefix = configure_prefix,
         configure = configure_path,
         prefix_flag = prefix_flag,
diff --git foreign_cc/private/framework.bzl foreign_cc/private/framework.bzl
index 9c263c0..56f1ae3 100644
--- foreign_cc/private/framework.bzl
+++ foreign_cc/private/framework.bzl
@@ -108,6 +108,13 @@ CC_EXTERNAL_RULE_ATTRIBUTES = {
             "Variables containing `PATH` (e.g. `PATH`, `LD_LIBRARY_PATH`, `CPATH`) entries will be prepended to the existing variable."
         ),
     ),
+    "env_override": attr.string_list(
+        doc = (
+            "List of keys from the 'env' attribute that should override any values set by the underlying C toolchain."
+        ),
+        mandatory = False,
+        default = [],
+    ),
     "includes": attr.string_list(
         doc = (
             "Optional list of include dirs to be passed to the dependencies of this library. " +
diff --git foreign_cc/private/framework/helpers.bzl foreign_cc/private/framework/helpers.bzl
index 4796813..b4de856 100644
--- foreign_cc/private/framework/helpers.bzl
+++ foreign_cc/private/framework/helpers.bzl
@@ -191,6 +191,7 @@ def do_function_call(text, shell_context):
         return replace_exports(after, shell_context)
 
     arguments = split_arguments(after.strip(" ")) if after else []
+
     return call_shell(shell_context, funname, *arguments)
 
 # buildifier: disable=function-docstring
@@ -199,22 +200,28 @@ def split_arguments(text):
     current = text.strip(" ")
 
     for _ in range(1, 2147483647):
+        current = current.strip(" ")
         if not current:
             break
 
         # we are ignoring escaped quotes
-        (before, separator, after) = current.partition("\"")
-        if not separator:
-            parts += current.split(" ")
+        s_quote = current.find("\"")
+        if s_quote < 0:
+            for e in current.split(" "):
+                if len(e) > 0:
+                    parts.append(e)
             break
-        (quoted, separator2, after2) = after.partition("\"")
-        if not separator2:
+
+        e_quote = current.find("\"", s_quote + 1)
+        if e_quote < 0:
             fail("Incorrect quoting in fragment: {}".format(current))
 
-        before = before.strip(" ")
-        if before:
+        # backtrack to first space, from here to e_quote is a token
+        e_before = current.rfind(" ", 0, s_quote)
+        if e_before >= 0:
+            before = current[0:e_before].strip(" ")
             parts += before.split(" ")
-        parts.append("\"" + quoted + "\"")
-        current = after2
+        parts.append(current[e_before + 1:e_quote + 1])
+        current = current[e_quote + 1:]
 
     return parts
diff --git foreign_cc/private/make_env_vars.bzl foreign_cc/private/make_env_vars.bzl
index b5177c7..4d819a2 100644
--- foreign_cc/private/make_env_vars.bzl
+++ foreign_cc/private/make_env_vars.bzl
@@ -9,9 +9,10 @@ def get_make_env_vars(
         tools,
         flags,
         user_vars,
+        user_vars_override,
         deps,
         inputs):
-    vars = _get_make_variables(workspace_name, tools, flags, user_vars)
+    vars = _get_make_variables(workspace_name, tools, flags, user_vars, user_vars_override)
     deps_flags = _define_deps_flags(deps, inputs)
 
     # For cross-compilation.
@@ -94,7 +95,7 @@ _MAKE_TOOLS = {
     # missing: cxx_linker_executable
 }
 
-def _get_make_variables(workspace_name, tools, flags, user_env_vars):
+def _get_make_variables(workspace_name, tools, flags, user_env_vars, user_vars_override):
     vars = {}
 
     for flag in _MAKE_FLAGS:
@@ -106,7 +107,10 @@ def _get_make_variables(workspace_name, tools, flags, user_env_vars):
     for user_var in user_env_vars:
         toolchain_val = vars.get(user_var)
         if toolchain_val:
-            vars[user_var] = toolchain_val + [user_env_vars[user_var]]
+            if user_var in user_vars_override:
+                vars[user_var] = [user_env_vars[user_var]]
+            else:
+                vars[user_var] = toolchain_val + [user_env_vars[user_var]]
 
     tools_dict = {}
     for tool in _MAKE_TOOLS:
diff --git foreign_cc/private/make_script.bzl foreign_cc/private/make_script.bzl
index d86ff60..039b0cf 100644
--- foreign_cc/private/make_script.bzl
+++ foreign_cc/private/make_script.bzl
@@ -9,6 +9,7 @@ def create_make_script(
         flags,
         root,
         env_vars,
+        env_vars_override,
         deps,
         inputs,
         make_commands):
@@ -19,7 +20,7 @@ def create_make_script(
     script.append("##symlink_contents_to_dir## $$EXT_BUILD_ROOT$$/{} $$BUILD_TMPDIR$$ False".format(root))
 
     script.append("##enable_tracing##")
-    configure_vars = get_make_env_vars(workspace_name, tools, flags, env_vars, deps, inputs)
+    configure_vars = get_make_env_vars(workspace_name, tools, flags, env_vars, env_vars_override, deps, inputs)
     script.extend(["{env_vars} {command}".format(
         env_vars = configure_vars,
         command = command,
diff --git test/convert_shell_script_test.bzl test/convert_shell_script_test.bzl
index 88ff647..1fe14ed 100644
--- test/convert_shell_script_test.bzl
+++ test/convert_shell_script_test.bzl
@@ -84,6 +84,7 @@ def _split_arguments_test(ctx):
         " 1 2 3": ["1", "2", "3"],
         " usual \"quoted argument\"": ["usual", "\"quoted argument\""],
         "1 2": ["1", "2"],
+        "var -flag1=\"redacted\" -flag2=\"redacted\"": ["var", "-flag1=\"redacted\"", "-flag2=\"redacted\""],
     }
     for case in cases:
         result = split_arguments(case)
diff --git toolchains/built_toolchains.bzl toolchains/built_toolchains.bzl
index 4f32252..2379782 100644
--- toolchains/built_toolchains.bzl
+++ toolchains/built_toolchains.bzl
@@ -166,6 +166,7 @@ def _meson_toolchain(version, register_toolchains):
             http_archive,
             name = "meson_src",
             build_file_content = _MESON_BUILD_FILE_CONTENT,
+            sha256 = "d04b541f97ca439fb82fab7d0d480988be4bd4e62563a5ca35fadb5400727b1c",
             strip_prefix = "meson-1.1.1",
             url = "https://github.com/mesonbuild/meson/releases/download/1.1.1/meson-1.1.1.tar.gz",
         )
diff --git toolchains/native_tools/native_tools_toolchain.bzl toolchains/native_tools/native_tools_toolchain.bzl
index 4613b3e..736d1ec 100644
--- toolchains/native_tools/native_tools_toolchain.bzl
+++ toolchains/native_tools/native_tools_toolchain.bzl
@@ -86,6 +86,7 @@ native_tool_toolchain = rule(
                 "If the tool is built as part of the build, the corresponding build target, " +
                 "which should produce the tree artifact with the binary to call."
             ),
+            allow_files = True,
         ),
     },
     incompatible_use_toolchain_transition = True,
